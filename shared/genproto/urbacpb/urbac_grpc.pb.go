// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: proto/urbac/urbac.proto

package urbacpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RBACService_CreateModule_FullMethodName                 = "/urbac.RBACService/CreateModule"
	RBACService_UpdateModule_FullMethodName                 = "/urbac.RBACService/UpdateModule"
	RBACService_DeactivateModule_FullMethodName             = "/urbac.RBACService/DeactivateModule"
	RBACService_DeleteModule_FullMethodName                 = "/urbac.RBACService/DeleteModule"
	RBACService_ListModules_FullMethodName                  = "/urbac.RBACService/ListModules"
	RBACService_CreateSubmodule_FullMethodName              = "/urbac.RBACService/CreateSubmodule"
	RBACService_UpdateSubmodule_FullMethodName              = "/urbac.RBACService/UpdateSubmodule"
	RBACService_DeactivateSubmodule_FullMethodName          = "/urbac.RBACService/DeactivateSubmodule"
	RBACService_DeleteSubmodule_FullMethodName              = "/urbac.RBACService/DeleteSubmodule"
	RBACService_ListSubmodules_FullMethodName               = "/urbac.RBACService/ListSubmodules"
	RBACService_CreatePermissionType_FullMethodName         = "/urbac.RBACService/CreatePermissionType"
	RBACService_UpdatePermissionType_FullMethodName         = "/urbac.RBACService/UpdatePermissionType"
	RBACService_DeactivatePermissionType_FullMethodName     = "/urbac.RBACService/DeactivatePermissionType"
	RBACService_ListPermissionTypes_FullMethodName          = "/urbac.RBACService/ListPermissionTypes"
	RBACService_CreateRole_FullMethodName                   = "/urbac.RBACService/CreateRole"
	RBACService_UpdateRole_FullMethodName                   = "/urbac.RBACService/UpdateRole"
	RBACService_DeactivateRole_FullMethodName               = "/urbac.RBACService/DeactivateRole"
	RBACService_DeleteRole_FullMethodName                   = "/urbac.RBACService/DeleteRole"
	RBACService_ListRoles_FullMethodName                    = "/urbac.RBACService/ListRoles"
	RBACService_AssignRolePermission_FullMethodName         = "/urbac.RBACService/AssignRolePermission"
	RBACService_RevokeRolePermission_FullMethodName         = "/urbac.RBACService/RevokeRolePermission"
	RBACService_ListRolePermissions_FullMethodName          = "/urbac.RBACService/ListRolePermissions"
	RBACService_AssignUserRole_FullMethodName               = "/urbac.RBACService/AssignUserRole"
	RBACService_RemoveUserRole_FullMethodName               = "/urbac.RBACService/RemoveUserRole"
	RBACService_ListUserRoles_FullMethodName                = "/urbac.RBACService/ListUserRoles"
	RBACService_UpgradeUserRole_FullMethodName              = "/urbac.RBACService/UpgradeUserRole"
	RBACService_AssignUserPermissionOverride_FullMethodName = "/urbac.RBACService/AssignUserPermissionOverride"
	RBACService_RevokeUserPermissionOverride_FullMethodName = "/urbac.RBACService/RevokeUserPermissionOverride"
	RBACService_ListUserPermissionOverrides_FullMethodName  = "/urbac.RBACService/ListUserPermissionOverrides"
	RBACService_GetEffectiveUserPermissions_FullMethodName  = "/urbac.RBACService/GetEffectiveUserPermissions"
	RBACService_CheckUserPermission_FullMethodName          = "/urbac.RBACService/CheckUserPermission"
	RBACService_ListPermissionAuditEvents_FullMethodName    = "/urbac.RBACService/ListPermissionAuditEvents"
)

// RBACServiceClient is the client API for RBACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RBACServiceClient interface {
	// ----------------------
	// MODULES
	// ----------------------
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*ModuleResponse, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*ModuleResponse, error)
	DeactivateModule(ctx context.Context, in *DeactivateModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error)
	// ----------------------
	// SUBMODULES
	// ----------------------
	CreateSubmodule(ctx context.Context, in *CreateSubmoduleRequest, opts ...grpc.CallOption) (*SubmoduleResponse, error)
	UpdateSubmodule(ctx context.Context, in *UpdateSubmoduleRequest, opts ...grpc.CallOption) (*SubmoduleResponse, error)
	DeactivateSubmodule(ctx context.Context, in *DeactivateSubmoduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSubmodule(ctx context.Context, in *DeleteSubmoduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSubmodules(ctx context.Context, in *ListSubmodulesRequest, opts ...grpc.CallOption) (*ListSubmodulesResponse, error)
	// ----------------------
	// PERMISSION TYPES
	// ----------------------
	CreatePermissionType(ctx context.Context, in *CreatePermissionTypeRequest, opts ...grpc.CallOption) (*PermissionTypeResponse, error)
	UpdatePermissionType(ctx context.Context, in *UpdatePermissionTypeRequest, opts ...grpc.CallOption) (*PermissionTypeResponse, error)
	DeactivatePermissionType(ctx context.Context, in *DeactivatePermissionTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPermissionTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPermissionTypesResponse, error)
	// ----------------------
	// ROLES
	// ----------------------
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
	DeactivateRole(ctx context.Context, in *DeactivateRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRolesResponse, error)
	AssignRolePermission(ctx context.Context, in *AssignRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RevokeRolePermission(ctx context.Context, in *RevokeRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListRolePermissions(ctx context.Context, in *ListRolePermissionsRequest, opts ...grpc.CallOption) (*ListRolePermissionsResponse, error)
	// ----------------------
	// USER ROLES
	// ----------------------
	AssignUserRole(ctx context.Context, in *AssignUserRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveUserRole(ctx context.Context, in *RemoveUserRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListUserRoles(ctx context.Context, in *ListUserRolesRequest, opts ...grpc.CallOption) (*ListUserRolesResponse, error)
	UpgradeUserRole(ctx context.Context, in *UpgradeUserRoleRequest, opts ...grpc.CallOption) (*UserRoleResponse, error)
	// ----------------------
	// USER PERMISSION OVERRIDES
	// ----------------------
	AssignUserPermissionOverride(ctx context.Context, in *AssignUserPermissionOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RevokeUserPermissionOverride(ctx context.Context, in *RevokeUserPermissionOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListUserPermissionOverrides(ctx context.Context, in *ListUserPermissionOverridesRequest, opts ...grpc.CallOption) (*ListUserPermissionOverridesResponse, error)
	// ----------------------
	// PERMISSION QUERIES
	// ----------------------
	GetEffectiveUserPermissions(ctx context.Context, in *GetEffectiveUserPermissionsRequest, opts ...grpc.CallOption) (*GetEffectiveUserPermissionsResponse, error)
	CheckUserPermission(ctx context.Context, in *CheckUserPermissionRequest, opts ...grpc.CallOption) (*CheckUserPermissionResponse, error)
	// ----------------------
	// AUDIT LOGS
	// ----------------------
	ListPermissionAuditEvents(ctx context.Context, in *ListPermissionAuditEventsRequest, opts ...grpc.CallOption) (*ListPermissionAuditEventsResponse, error)
}

type rBACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACServiceClient(cc grpc.ClientConnInterface) RBACServiceClient {
	return &rBACServiceClient{cc}
}

func (c *rBACServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*ModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModuleResponse)
	err := c.cc.Invoke(ctx, RBACService_CreateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*ModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModuleResponse)
	err := c.cc.Invoke(ctx, RBACService_UpdateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeactivateModule(ctx context.Context, in *DeactivateModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_DeactivateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_DeleteModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModulesResponse)
	err := c.cc.Invoke(ctx, RBACService_ListModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CreateSubmodule(ctx context.Context, in *CreateSubmoduleRequest, opts ...grpc.CallOption) (*SubmoduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmoduleResponse)
	err := c.cc.Invoke(ctx, RBACService_CreateSubmodule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) UpdateSubmodule(ctx context.Context, in *UpdateSubmoduleRequest, opts ...grpc.CallOption) (*SubmoduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmoduleResponse)
	err := c.cc.Invoke(ctx, RBACService_UpdateSubmodule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeactivateSubmodule(ctx context.Context, in *DeactivateSubmoduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_DeactivateSubmodule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteSubmodule(ctx context.Context, in *DeleteSubmoduleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_DeleteSubmodule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListSubmodules(ctx context.Context, in *ListSubmodulesRequest, opts ...grpc.CallOption) (*ListSubmodulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubmodulesResponse)
	err := c.cc.Invoke(ctx, RBACService_ListSubmodules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CreatePermissionType(ctx context.Context, in *CreatePermissionTypeRequest, opts ...grpc.CallOption) (*PermissionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionTypeResponse)
	err := c.cc.Invoke(ctx, RBACService_CreatePermissionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) UpdatePermissionType(ctx context.Context, in *UpdatePermissionTypeRequest, opts ...grpc.CallOption) (*PermissionTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionTypeResponse)
	err := c.cc.Invoke(ctx, RBACService_UpdatePermissionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeactivatePermissionType(ctx context.Context, in *DeactivatePermissionTypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_DeactivatePermissionType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListPermissionTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPermissionTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionTypesResponse)
	err := c.cc.Invoke(ctx, RBACService_ListPermissionTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, RBACService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, RBACService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeactivateRole(ctx context.Context, in *DeactivateRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_DeactivateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListRoles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, RBACService_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AssignRolePermission(ctx context.Context, in *AssignRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_AssignRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) RevokeRolePermission(ctx context.Context, in *RevokeRolePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_RevokeRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListRolePermissions(ctx context.Context, in *ListRolePermissionsRequest, opts ...grpc.CallOption) (*ListRolePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolePermissionsResponse)
	err := c.cc.Invoke(ctx, RBACService_ListRolePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AssignUserRole(ctx context.Context, in *AssignUserRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_AssignUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) RemoveUserRole(ctx context.Context, in *RemoveUserRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_RemoveUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListUserRoles(ctx context.Context, in *ListUserRolesRequest, opts ...grpc.CallOption) (*ListUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserRolesResponse)
	err := c.cc.Invoke(ctx, RBACService_ListUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) UpgradeUserRole(ctx context.Context, in *UpgradeUserRoleRequest, opts ...grpc.CallOption) (*UserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRoleResponse)
	err := c.cc.Invoke(ctx, RBACService_UpgradeUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AssignUserPermissionOverride(ctx context.Context, in *AssignUserPermissionOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_AssignUserPermissionOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) RevokeUserPermissionOverride(ctx context.Context, in *RevokeUserPermissionOverrideRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RBACService_RevokeUserPermissionOverride_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListUserPermissionOverrides(ctx context.Context, in *ListUserPermissionOverridesRequest, opts ...grpc.CallOption) (*ListUserPermissionOverridesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserPermissionOverridesResponse)
	err := c.cc.Invoke(ctx, RBACService_ListUserPermissionOverrides_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetEffectiveUserPermissions(ctx context.Context, in *GetEffectiveUserPermissionsRequest, opts ...grpc.CallOption) (*GetEffectiveUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEffectiveUserPermissionsResponse)
	err := c.cc.Invoke(ctx, RBACService_GetEffectiveUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CheckUserPermission(ctx context.Context, in *CheckUserPermissionRequest, opts ...grpc.CallOption) (*CheckUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserPermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CheckUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListPermissionAuditEvents(ctx context.Context, in *ListPermissionAuditEventsRequest, opts ...grpc.CallOption) (*ListPermissionAuditEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionAuditEventsResponse)
	err := c.cc.Invoke(ctx, RBACService_ListPermissionAuditEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServiceServer is the server API for RBACService service.
// All implementations must embed UnimplementedRBACServiceServer
// for forward compatibility.
type RBACServiceServer interface {
	// ----------------------
	// MODULES
	// ----------------------
	CreateModule(context.Context, *CreateModuleRequest) (*ModuleResponse, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*ModuleResponse, error)
	DeactivateModule(context.Context, *DeactivateModuleRequest) (*emptypb.Empty, error)
	DeleteModule(context.Context, *DeleteModuleRequest) (*emptypb.Empty, error)
	ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error)
	// ----------------------
	// SUBMODULES
	// ----------------------
	CreateSubmodule(context.Context, *CreateSubmoduleRequest) (*SubmoduleResponse, error)
	UpdateSubmodule(context.Context, *UpdateSubmoduleRequest) (*SubmoduleResponse, error)
	DeactivateSubmodule(context.Context, *DeactivateSubmoduleRequest) (*emptypb.Empty, error)
	DeleteSubmodule(context.Context, *DeleteSubmoduleRequest) (*emptypb.Empty, error)
	ListSubmodules(context.Context, *ListSubmodulesRequest) (*ListSubmodulesResponse, error)
	// ----------------------
	// PERMISSION TYPES
	// ----------------------
	CreatePermissionType(context.Context, *CreatePermissionTypeRequest) (*PermissionTypeResponse, error)
	UpdatePermissionType(context.Context, *UpdatePermissionTypeRequest) (*PermissionTypeResponse, error)
	DeactivatePermissionType(context.Context, *DeactivatePermissionTypeRequest) (*emptypb.Empty, error)
	ListPermissionTypes(context.Context, *emptypb.Empty) (*ListPermissionTypesResponse, error)
	// ----------------------
	// ROLES
	// ----------------------
	CreateRole(context.Context, *CreateRoleRequest) (*RoleResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*RoleResponse, error)
	DeactivateRole(context.Context, *DeactivateRoleRequest) (*emptypb.Empty, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	ListRoles(context.Context, *emptypb.Empty) (*ListRolesResponse, error)
	AssignRolePermission(context.Context, *AssignRolePermissionRequest) (*emptypb.Empty, error)
	RevokeRolePermission(context.Context, *RevokeRolePermissionRequest) (*emptypb.Empty, error)
	ListRolePermissions(context.Context, *ListRolePermissionsRequest) (*ListRolePermissionsResponse, error)
	// ----------------------
	// USER ROLES
	// ----------------------
	AssignUserRole(context.Context, *AssignUserRoleRequest) (*emptypb.Empty, error)
	RemoveUserRole(context.Context, *RemoveUserRoleRequest) (*emptypb.Empty, error)
	ListUserRoles(context.Context, *ListUserRolesRequest) (*ListUserRolesResponse, error)
	UpgradeUserRole(context.Context, *UpgradeUserRoleRequest) (*UserRoleResponse, error)
	// ----------------------
	// USER PERMISSION OVERRIDES
	// ----------------------
	AssignUserPermissionOverride(context.Context, *AssignUserPermissionOverrideRequest) (*emptypb.Empty, error)
	RevokeUserPermissionOverride(context.Context, *RevokeUserPermissionOverrideRequest) (*emptypb.Empty, error)
	ListUserPermissionOverrides(context.Context, *ListUserPermissionOverridesRequest) (*ListUserPermissionOverridesResponse, error)
	// ----------------------
	// PERMISSION QUERIES
	// ----------------------
	GetEffectiveUserPermissions(context.Context, *GetEffectiveUserPermissionsRequest) (*GetEffectiveUserPermissionsResponse, error)
	CheckUserPermission(context.Context, *CheckUserPermissionRequest) (*CheckUserPermissionResponse, error)
	// ----------------------
	// AUDIT LOGS
	// ----------------------
	ListPermissionAuditEvents(context.Context, *ListPermissionAuditEventsRequest) (*ListPermissionAuditEventsResponse, error)
	mustEmbedUnimplementedRBACServiceServer()
}

// UnimplementedRBACServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRBACServiceServer struct{}

func (UnimplementedRBACServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*ModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedRBACServiceServer) UpdateModule(context.Context, *UpdateModuleRequest) (*ModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedRBACServiceServer) DeactivateModule(context.Context, *DeactivateModuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateModule not implemented")
}
func (UnimplementedRBACServiceServer) DeleteModule(context.Context, *DeleteModuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedRBACServiceServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedRBACServiceServer) CreateSubmodule(context.Context, *CreateSubmoduleRequest) (*SubmoduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubmodule not implemented")
}
func (UnimplementedRBACServiceServer) UpdateSubmodule(context.Context, *UpdateSubmoduleRequest) (*SubmoduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubmodule not implemented")
}
func (UnimplementedRBACServiceServer) DeactivateSubmodule(context.Context, *DeactivateSubmoduleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSubmodule not implemented")
}
func (UnimplementedRBACServiceServer) DeleteSubmodule(context.Context, *DeleteSubmoduleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubmodule not implemented")
}
func (UnimplementedRBACServiceServer) ListSubmodules(context.Context, *ListSubmodulesRequest) (*ListSubmodulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmodules not implemented")
}
func (UnimplementedRBACServiceServer) CreatePermissionType(context.Context, *CreatePermissionTypeRequest) (*PermissionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermissionType not implemented")
}
func (UnimplementedRBACServiceServer) UpdatePermissionType(context.Context, *UpdatePermissionTypeRequest) (*PermissionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermissionType not implemented")
}
func (UnimplementedRBACServiceServer) DeactivatePermissionType(context.Context, *DeactivatePermissionTypeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivatePermissionType not implemented")
}
func (UnimplementedRBACServiceServer) ListPermissionTypes(context.Context, *emptypb.Empty) (*ListPermissionTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionTypes not implemented")
}
func (UnimplementedRBACServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRBACServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRBACServiceServer) DeactivateRole(context.Context, *DeactivateRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateRole not implemented")
}
func (UnimplementedRBACServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRBACServiceServer) ListRoles(context.Context, *emptypb.Empty) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedRBACServiceServer) AssignRolePermission(context.Context, *AssignRolePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRolePermission not implemented")
}
func (UnimplementedRBACServiceServer) RevokeRolePermission(context.Context, *RevokeRolePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeRolePermission not implemented")
}
func (UnimplementedRBACServiceServer) ListRolePermissions(context.Context, *ListRolePermissionsRequest) (*ListRolePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolePermissions not implemented")
}
func (UnimplementedRBACServiceServer) AssignUserRole(context.Context, *AssignUserRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserRole not implemented")
}
func (UnimplementedRBACServiceServer) RemoveUserRole(context.Context, *RemoveUserRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserRole not implemented")
}
func (UnimplementedRBACServiceServer) ListUserRoles(context.Context, *ListUserRolesRequest) (*ListUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRoles not implemented")
}
func (UnimplementedRBACServiceServer) UpgradeUserRole(context.Context, *UpgradeUserRoleRequest) (*UserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeUserRole not implemented")
}
func (UnimplementedRBACServiceServer) AssignUserPermissionOverride(context.Context, *AssignUserPermissionOverrideRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUserPermissionOverride not implemented")
}
func (UnimplementedRBACServiceServer) RevokeUserPermissionOverride(context.Context, *RevokeUserPermissionOverrideRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUserPermissionOverride not implemented")
}
func (UnimplementedRBACServiceServer) ListUserPermissionOverrides(context.Context, *ListUserPermissionOverridesRequest) (*ListUserPermissionOverridesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPermissionOverrides not implemented")
}
func (UnimplementedRBACServiceServer) GetEffectiveUserPermissions(context.Context, *GetEffectiveUserPermissionsRequest) (*GetEffectiveUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveUserPermissions not implemented")
}
func (UnimplementedRBACServiceServer) CheckUserPermission(context.Context, *CheckUserPermissionRequest) (*CheckUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPermission not implemented")
}
func (UnimplementedRBACServiceServer) ListPermissionAuditEvents(context.Context, *ListPermissionAuditEventsRequest) (*ListPermissionAuditEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionAuditEvents not implemented")
}
func (UnimplementedRBACServiceServer) mustEmbedUnimplementedRBACServiceServer() {}
func (UnimplementedRBACServiceServer) testEmbeddedByValue()                     {}

// UnsafeRBACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServiceServer will
// result in compilation errors.
type UnsafeRBACServiceServer interface {
	mustEmbedUnimplementedRBACServiceServer()
}

func RegisterRBACServiceServer(s grpc.ServiceRegistrar, srv RBACServiceServer) {
	// If the following call pancis, it indicates UnimplementedRBACServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RBACService_ServiceDesc, srv)
}

func _RBACService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_UpdateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeactivateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeactivateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeactivateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeactivateModule(ctx, req.(*DeactivateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteModule(ctx, req.(*DeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CreateSubmodule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubmoduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CreateSubmodule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CreateSubmodule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CreateSubmodule(ctx, req.(*CreateSubmoduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_UpdateSubmodule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubmoduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).UpdateSubmodule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_UpdateSubmodule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).UpdateSubmodule(ctx, req.(*UpdateSubmoduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeactivateSubmodule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateSubmoduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeactivateSubmodule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeactivateSubmodule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeactivateSubmodule(ctx, req.(*DeactivateSubmoduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteSubmodule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubmoduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteSubmodule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteSubmodule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteSubmodule(ctx, req.(*DeleteSubmoduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListSubmodules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmodulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListSubmodules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListSubmodules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListSubmodules(ctx, req.(*ListSubmodulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CreatePermissionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CreatePermissionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CreatePermissionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CreatePermissionType(ctx, req.(*CreatePermissionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_UpdatePermissionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).UpdatePermissionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_UpdatePermissionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).UpdatePermissionType(ctx, req.(*UpdatePermissionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeactivatePermissionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivatePermissionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeactivatePermissionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeactivatePermissionType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeactivatePermissionType(ctx, req.(*DeactivatePermissionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListPermissionTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListPermissionTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListPermissionTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListPermissionTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeactivateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeactivateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeactivateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeactivateRole(ctx, req.(*DeactivateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListRoles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AssignRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AssignRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AssignRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AssignRolePermission(ctx, req.(*AssignRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_RevokeRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).RevokeRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_RevokeRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).RevokeRolePermission(ctx, req.(*RevokeRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListRolePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListRolePermissions(ctx, req.(*ListRolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AssignUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AssignUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AssignUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AssignUserRole(ctx, req.(*AssignUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_RemoveUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).RemoveUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_RemoveUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).RemoveUserRole(ctx, req.(*RemoveUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListUserRoles(ctx, req.(*ListUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_UpgradeUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).UpgradeUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_UpgradeUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).UpgradeUserRole(ctx, req.(*UpgradeUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AssignUserPermissionOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserPermissionOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AssignUserPermissionOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AssignUserPermissionOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AssignUserPermissionOverride(ctx, req.(*AssignUserPermissionOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_RevokeUserPermissionOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUserPermissionOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).RevokeUserPermissionOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_RevokeUserPermissionOverride_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).RevokeUserPermissionOverride(ctx, req.(*RevokeUserPermissionOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListUserPermissionOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPermissionOverridesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListUserPermissionOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListUserPermissionOverrides_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListUserPermissionOverrides(ctx, req.(*ListUserPermissionOverridesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetEffectiveUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetEffectiveUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetEffectiveUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetEffectiveUserPermissions(ctx, req.(*GetEffectiveUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CheckUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CheckUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CheckUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CheckUserPermission(ctx, req.(*CheckUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListPermissionAuditEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionAuditEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListPermissionAuditEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListPermissionAuditEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListPermissionAuditEvents(ctx, req.(*ListPermissionAuditEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RBACService_ServiceDesc is the grpc.ServiceDesc for RBACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urbac.RBACService",
	HandlerType: (*RBACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModule",
			Handler:    _RBACService_CreateModule_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _RBACService_UpdateModule_Handler,
		},
		{
			MethodName: "DeactivateModule",
			Handler:    _RBACService_DeactivateModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _RBACService_DeleteModule_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _RBACService_ListModules_Handler,
		},
		{
			MethodName: "CreateSubmodule",
			Handler:    _RBACService_CreateSubmodule_Handler,
		},
		{
			MethodName: "UpdateSubmodule",
			Handler:    _RBACService_UpdateSubmodule_Handler,
		},
		{
			MethodName: "DeactivateSubmodule",
			Handler:    _RBACService_DeactivateSubmodule_Handler,
		},
		{
			MethodName: "DeleteSubmodule",
			Handler:    _RBACService_DeleteSubmodule_Handler,
		},
		{
			MethodName: "ListSubmodules",
			Handler:    _RBACService_ListSubmodules_Handler,
		},
		{
			MethodName: "CreatePermissionType",
			Handler:    _RBACService_CreatePermissionType_Handler,
		},
		{
			MethodName: "UpdatePermissionType",
			Handler:    _RBACService_UpdatePermissionType_Handler,
		},
		{
			MethodName: "DeactivatePermissionType",
			Handler:    _RBACService_DeactivatePermissionType_Handler,
		},
		{
			MethodName: "ListPermissionTypes",
			Handler:    _RBACService_ListPermissionTypes_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _RBACService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RBACService_UpdateRole_Handler,
		},
		{
			MethodName: "DeactivateRole",
			Handler:    _RBACService_DeactivateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RBACService_DeleteRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _RBACService_ListRoles_Handler,
		},
		{
			MethodName: "AssignRolePermission",
			Handler:    _RBACService_AssignRolePermission_Handler,
		},
		{
			MethodName: "RevokeRolePermission",
			Handler:    _RBACService_RevokeRolePermission_Handler,
		},
		{
			MethodName: "ListRolePermissions",
			Handler:    _RBACService_ListRolePermissions_Handler,
		},
		{
			MethodName: "AssignUserRole",
			Handler:    _RBACService_AssignUserRole_Handler,
		},
		{
			MethodName: "RemoveUserRole",
			Handler:    _RBACService_RemoveUserRole_Handler,
		},
		{
			MethodName: "ListUserRoles",
			Handler:    _RBACService_ListUserRoles_Handler,
		},
		{
			MethodName: "UpgradeUserRole",
			Handler:    _RBACService_UpgradeUserRole_Handler,
		},
		{
			MethodName: "AssignUserPermissionOverride",
			Handler:    _RBACService_AssignUserPermissionOverride_Handler,
		},
		{
			MethodName: "RevokeUserPermissionOverride",
			Handler:    _RBACService_RevokeUserPermissionOverride_Handler,
		},
		{
			MethodName: "ListUserPermissionOverrides",
			Handler:    _RBACService_ListUserPermissionOverrides_Handler,
		},
		{
			MethodName: "GetEffectiveUserPermissions",
			Handler:    _RBACService_GetEffectiveUserPermissions_Handler,
		},
		{
			MethodName: "CheckUserPermission",
			Handler:    _RBACService_CheckUserPermission_Handler,
		},
		{
			MethodName: "ListPermissionAuditEvents",
			Handler:    _RBACService_ListPermissionAuditEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/urbac/urbac.proto",
}
