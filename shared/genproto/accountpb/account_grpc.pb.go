// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: proto/account/account.proto

package accountpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountService_InitiateTOTPSetup_FullMethodName     = "/account.AccountService/InitiateTOTPSetup"
	AccountService_GetTwoFAStatus_FullMethodName        = "/account.AccountService/GetTwoFAStatus"
	AccountService_EnableTwoFA_FullMethodName           = "/account.AccountService/EnableTwoFA"
	AccountService_DisableTwoFA_FullMethodName          = "/account.AccountService/DisableTwoFA"
	AccountService_VerifyTwoFA_FullMethodName           = "/account.AccountService/VerifyTwoFA"
	AccountService_RegenerateBackupCodes_FullMethodName = "/account.AccountService/RegenerateBackupCodes"
	AccountService_GetBackupCodes_FullMethodName        = "/account.AccountService/GetBackupCodes"
	AccountService_GetPreferences_FullMethodName        = "/account.AccountService/GetPreferences"
	AccountService_UpdatePreferences_FullMethodName     = "/account.AccountService/UpdatePreferences"
	AccountService_UpdateProfile_FullMethodName         = "/account.AccountService/UpdateProfile"
	AccountService_UpdateProfilePicture_FullMethodName  = "/account.AccountService/UpdateProfilePicture"
	AccountService_GetUserProfile_FullMethodName        = "/account.AccountService/GetUserProfile"
	AccountService_GetUserNationality_FullMethodName    = "/account.AccountService/GetUserNationality"
	AccountService_UpdateUserNationality_FullMethodName = "/account.AccountService/UpdateUserNationality"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ========== SERVICE ==========
type AccountServiceClient interface {
	// New: TOTP setup
	InitiateTOTPSetup(ctx context.Context, in *InitiateTOTPSetupRequest, opts ...grpc.CallOption) (*InitiateTOTPSetupResponse, error)
	// Existing 2FA
	GetTwoFAStatus(ctx context.Context, in *GetTwoFAStatusRequest, opts ...grpc.CallOption) (*GetTwoFAStatusResponse, error)
	EnableTwoFA(ctx context.Context, in *EnableTwoFARequest, opts ...grpc.CallOption) (*EnableTwoFAResponse, error)
	DisableTwoFA(ctx context.Context, in *DisableTwoFARequest, opts ...grpc.CallOption) (*DisableTwoFAResponse, error)
	VerifyTwoFA(ctx context.Context, in *VerifyTwoFARequest, opts ...grpc.CallOption) (*VerifyTwoFAResponse, error)
	RegenerateBackupCodes(ctx context.Context, in *RegenerateBackupCodesRequest, opts ...grpc.CallOption) (*RegenerateBackupCodesResponse, error)
	GetBackupCodes(ctx context.Context, in *GetBackupCodesRequest, opts ...grpc.CallOption) (*GetBackupCodesResponse, error)
	// Preferences
	GetPreferences(ctx context.Context, in *GetPreferencesRequest, opts ...grpc.CallOption) (*GetPreferencesResponse, error)
	UpdatePreferences(ctx context.Context, in *UpdatePreferencesRequest, opts ...grpc.CallOption) (*UpdatePreferencesResponse, error)
	// Profile
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	UpdateProfilePicture(ctx context.Context, in *UpdateProfilePictureRequest, opts ...grpc.CallOption) (*UpdateProfilePictureResponse, error)
	// New: Get full user profile
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// Nationality management
	GetUserNationality(ctx context.Context, in *GetUserNationalityRequest, opts ...grpc.CallOption) (*GetUserNationalityResponse, error)
	UpdateUserNationality(ctx context.Context, in *UpdateUserNationalityRequest, opts ...grpc.CallOption) (*UpdateUserNationalityResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) InitiateTOTPSetup(ctx context.Context, in *InitiateTOTPSetupRequest, opts ...grpc.CallOption) (*InitiateTOTPSetupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateTOTPSetupResponse)
	err := c.cc.Invoke(ctx, AccountService_InitiateTOTPSetup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetTwoFAStatus(ctx context.Context, in *GetTwoFAStatusRequest, opts ...grpc.CallOption) (*GetTwoFAStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTwoFAStatusResponse)
	err := c.cc.Invoke(ctx, AccountService_GetTwoFAStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) EnableTwoFA(ctx context.Context, in *EnableTwoFARequest, opts ...grpc.CallOption) (*EnableTwoFAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableTwoFAResponse)
	err := c.cc.Invoke(ctx, AccountService_EnableTwoFA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DisableTwoFA(ctx context.Context, in *DisableTwoFARequest, opts ...grpc.CallOption) (*DisableTwoFAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableTwoFAResponse)
	err := c.cc.Invoke(ctx, AccountService_DisableTwoFA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) VerifyTwoFA(ctx context.Context, in *VerifyTwoFARequest, opts ...grpc.CallOption) (*VerifyTwoFAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTwoFAResponse)
	err := c.cc.Invoke(ctx, AccountService_VerifyTwoFA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) RegenerateBackupCodes(ctx context.Context, in *RegenerateBackupCodesRequest, opts ...grpc.CallOption) (*RegenerateBackupCodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegenerateBackupCodesResponse)
	err := c.cc.Invoke(ctx, AccountService_RegenerateBackupCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetBackupCodes(ctx context.Context, in *GetBackupCodesRequest, opts ...grpc.CallOption) (*GetBackupCodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackupCodesResponse)
	err := c.cc.Invoke(ctx, AccountService_GetBackupCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetPreferences(ctx context.Context, in *GetPreferencesRequest, opts ...grpc.CallOption) (*GetPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPreferencesResponse)
	err := c.cc.Invoke(ctx, AccountService_GetPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdatePreferences(ctx context.Context, in *UpdatePreferencesRequest, opts ...grpc.CallOption) (*UpdatePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePreferencesResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdatePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateProfilePicture(ctx context.Context, in *UpdateProfilePictureRequest, opts ...grpc.CallOption) (*UpdateProfilePictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfilePictureResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdateProfilePicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, AccountService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetUserNationality(ctx context.Context, in *GetUserNationalityRequest, opts ...grpc.CallOption) (*GetUserNationalityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserNationalityResponse)
	err := c.cc.Invoke(ctx, AccountService_GetUserNationality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateUserNationality(ctx context.Context, in *UpdateUserNationalityRequest, opts ...grpc.CallOption) (*UpdateUserNationalityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserNationalityResponse)
	err := c.cc.Invoke(ctx, AccountService_UpdateUserNationality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility.
//
// ========== SERVICE ==========
type AccountServiceServer interface {
	// New: TOTP setup
	InitiateTOTPSetup(context.Context, *InitiateTOTPSetupRequest) (*InitiateTOTPSetupResponse, error)
	// Existing 2FA
	GetTwoFAStatus(context.Context, *GetTwoFAStatusRequest) (*GetTwoFAStatusResponse, error)
	EnableTwoFA(context.Context, *EnableTwoFARequest) (*EnableTwoFAResponse, error)
	DisableTwoFA(context.Context, *DisableTwoFARequest) (*DisableTwoFAResponse, error)
	VerifyTwoFA(context.Context, *VerifyTwoFARequest) (*VerifyTwoFAResponse, error)
	RegenerateBackupCodes(context.Context, *RegenerateBackupCodesRequest) (*RegenerateBackupCodesResponse, error)
	GetBackupCodes(context.Context, *GetBackupCodesRequest) (*GetBackupCodesResponse, error)
	// Preferences
	GetPreferences(context.Context, *GetPreferencesRequest) (*GetPreferencesResponse, error)
	UpdatePreferences(context.Context, *UpdatePreferencesRequest) (*UpdatePreferencesResponse, error)
	// Profile
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	UpdateProfilePicture(context.Context, *UpdateProfilePictureRequest) (*UpdateProfilePictureResponse, error)
	// New: Get full user profile
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// Nationality management
	GetUserNationality(context.Context, *GetUserNationalityRequest) (*GetUserNationalityResponse, error)
	UpdateUserNationality(context.Context, *UpdateUserNationalityRequest) (*UpdateUserNationalityResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServiceServer struct{}

func (UnimplementedAccountServiceServer) InitiateTOTPSetup(context.Context, *InitiateTOTPSetupRequest) (*InitiateTOTPSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTOTPSetup not implemented")
}
func (UnimplementedAccountServiceServer) GetTwoFAStatus(context.Context, *GetTwoFAStatusRequest) (*GetTwoFAStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwoFAStatus not implemented")
}
func (UnimplementedAccountServiceServer) EnableTwoFA(context.Context, *EnableTwoFARequest) (*EnableTwoFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTwoFA not implemented")
}
func (UnimplementedAccountServiceServer) DisableTwoFA(context.Context, *DisableTwoFARequest) (*DisableTwoFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTwoFA not implemented")
}
func (UnimplementedAccountServiceServer) VerifyTwoFA(context.Context, *VerifyTwoFARequest) (*VerifyTwoFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTwoFA not implemented")
}
func (UnimplementedAccountServiceServer) RegenerateBackupCodes(context.Context, *RegenerateBackupCodesRequest) (*RegenerateBackupCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateBackupCodes not implemented")
}
func (UnimplementedAccountServiceServer) GetBackupCodes(context.Context, *GetBackupCodesRequest) (*GetBackupCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupCodes not implemented")
}
func (UnimplementedAccountServiceServer) GetPreferences(context.Context, *GetPreferencesRequest) (*GetPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreferences not implemented")
}
func (UnimplementedAccountServiceServer) UpdatePreferences(context.Context, *UpdatePreferencesRequest) (*UpdatePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePreferences not implemented")
}
func (UnimplementedAccountServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedAccountServiceServer) UpdateProfilePicture(context.Context, *UpdateProfilePictureRequest) (*UpdateProfilePictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfilePicture not implemented")
}
func (UnimplementedAccountServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedAccountServiceServer) GetUserNationality(context.Context, *GetUserNationalityRequest) (*GetUserNationalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNationality not implemented")
}
func (UnimplementedAccountServiceServer) UpdateUserNationality(context.Context, *UpdateUserNationalityRequest) (*UpdateUserNationalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNationality not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}
func (UnimplementedAccountServiceServer) testEmbeddedByValue()                        {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_InitiateTOTPSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateTOTPSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).InitiateTOTPSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_InitiateTOTPSetup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).InitiateTOTPSetup(ctx, req.(*InitiateTOTPSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetTwoFAStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwoFAStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetTwoFAStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetTwoFAStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetTwoFAStatus(ctx, req.(*GetTwoFAStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_EnableTwoFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTwoFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).EnableTwoFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_EnableTwoFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).EnableTwoFA(ctx, req.(*EnableTwoFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DisableTwoFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTwoFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DisableTwoFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DisableTwoFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DisableTwoFA(ctx, req.(*DisableTwoFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_VerifyTwoFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTwoFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).VerifyTwoFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_VerifyTwoFA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).VerifyTwoFA(ctx, req.(*VerifyTwoFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_RegenerateBackupCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateBackupCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).RegenerateBackupCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_RegenerateBackupCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).RegenerateBackupCodes(ctx, req.(*RegenerateBackupCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetBackupCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetBackupCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetBackupCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetBackupCodes(ctx, req.(*GetBackupCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetPreferences(ctx, req.(*GetPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdatePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdatePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdatePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdatePreferences(ctx, req.(*UpdatePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateProfilePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfilePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateProfilePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateProfilePicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateProfilePicture(ctx, req.(*UpdateProfilePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetUserNationality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNationalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetUserNationality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetUserNationality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetUserNationality(ctx, req.(*GetUserNationalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateUserNationality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNationalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateUserNationality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UpdateUserNationality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateUserNationality(ctx, req.(*UpdateUserNationalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateTOTPSetup",
			Handler:    _AccountService_InitiateTOTPSetup_Handler,
		},
		{
			MethodName: "GetTwoFAStatus",
			Handler:    _AccountService_GetTwoFAStatus_Handler,
		},
		{
			MethodName: "EnableTwoFA",
			Handler:    _AccountService_EnableTwoFA_Handler,
		},
		{
			MethodName: "DisableTwoFA",
			Handler:    _AccountService_DisableTwoFA_Handler,
		},
		{
			MethodName: "VerifyTwoFA",
			Handler:    _AccountService_VerifyTwoFA_Handler,
		},
		{
			MethodName: "RegenerateBackupCodes",
			Handler:    _AccountService_RegenerateBackupCodes_Handler,
		},
		{
			MethodName: "GetBackupCodes",
			Handler:    _AccountService_GetBackupCodes_Handler,
		},
		{
			MethodName: "GetPreferences",
			Handler:    _AccountService_GetPreferences_Handler,
		},
		{
			MethodName: "UpdatePreferences",
			Handler:    _AccountService_UpdatePreferences_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _AccountService_UpdateProfile_Handler,
		},
		{
			MethodName: "UpdateProfilePicture",
			Handler:    _AccountService_UpdateProfilePicture_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _AccountService_GetUserProfile_Handler,
		},
		{
			MethodName: "GetUserNationality",
			Handler:    _AccountService_GetUserNationality_Handler,
		},
		{
			MethodName: "UpdateUserNationality",
			Handler:    _AccountService_UpdateUserNationality_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/account.proto",
}
