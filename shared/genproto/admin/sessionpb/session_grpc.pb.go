// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: proto/admin/session.proto

package adminsessionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminSessionService_ValidateSession_FullMethodName       = "/admin.session.AdminSessionService/ValidateSession"
	AdminSessionService_CreateSession_FullMethodName         = "/admin.session.AdminSessionService/CreateSession"
	AdminSessionService_UpdateSessionActivity_FullMethodName = "/admin.session.AdminSessionService/UpdateSessionActivity"
	AdminSessionService_DeleteSession_FullMethodName         = "/admin.session.AdminSessionService/DeleteSession"
	AdminSessionService_DeleteAllSessions_FullMethodName     = "/admin.session.AdminSessionService/DeleteAllSessions"
	AdminSessionService_ListSessions_FullMethodName          = "/admin.session.AdminSessionService/ListSessions"
	AdminSessionService_DeleteSessionByID_FullMethodName     = "/admin.session.AdminSessionService/DeleteSessionByID"
)

// AdminSessionServiceClient is the client API for AdminSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminSessionServiceClient interface {
	ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	UpdateSessionActivity(ctx context.Context, in *UpdateSessionActivityRequest, opts ...grpc.CallOption) (*UpdateSessionActivityResponse, error)
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteAllSessions(ctx context.Context, in *DeleteAllSessionsRequest, opts ...grpc.CallOption) (*Empty, error)
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	DeleteSessionByID(ctx context.Context, in *DeleteSessionByIDRequest, opts ...grpc.CallOption) (*Empty, error)
}

type adminSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminSessionServiceClient(cc grpc.ClientConnInterface) AdminSessionServiceClient {
	return &adminSessionServiceClient{cc}
}

func (c *adminSessionServiceClient) ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSessionResponse)
	err := c.cc.Invoke(ctx, AdminSessionService_ValidateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSessionServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, AdminSessionService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSessionServiceClient) UpdateSessionActivity(ctx context.Context, in *UpdateSessionActivityRequest, opts ...grpc.CallOption) (*UpdateSessionActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSessionActivityResponse)
	err := c.cc.Invoke(ctx, AdminSessionService_UpdateSessionActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSessionServiceClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdminSessionService_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSessionServiceClient) DeleteAllSessions(ctx context.Context, in *DeleteAllSessionsRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdminSessionService_DeleteAllSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSessionServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, AdminSessionService_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminSessionServiceClient) DeleteSessionByID(ctx context.Context, in *DeleteSessionByIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AdminSessionService_DeleteSessionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminSessionServiceServer is the server API for AdminSessionService service.
// All implementations must embed UnimplementedAdminSessionServiceServer
// for forward compatibility.
type AdminSessionServiceServer interface {
	ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	UpdateSessionActivity(context.Context, *UpdateSessionActivityRequest) (*UpdateSessionActivityResponse, error)
	DeleteSession(context.Context, *DeleteSessionRequest) (*Empty, error)
	DeleteAllSessions(context.Context, *DeleteAllSessionsRequest) (*Empty, error)
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	DeleteSessionByID(context.Context, *DeleteSessionByIDRequest) (*Empty, error)
	mustEmbedUnimplementedAdminSessionServiceServer()
}

// UnimplementedAdminSessionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminSessionServiceServer struct{}

func (UnimplementedAdminSessionServiceServer) ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSession not implemented")
}
func (UnimplementedAdminSessionServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedAdminSessionServiceServer) UpdateSessionActivity(context.Context, *UpdateSessionActivityRequest) (*UpdateSessionActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionActivity not implemented")
}
func (UnimplementedAdminSessionServiceServer) DeleteSession(context.Context, *DeleteSessionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedAdminSessionServiceServer) DeleteAllSessions(context.Context, *DeleteAllSessionsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSessions not implemented")
}
func (UnimplementedAdminSessionServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedAdminSessionServiceServer) DeleteSessionByID(context.Context, *DeleteSessionByIDRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionByID not implemented")
}
func (UnimplementedAdminSessionServiceServer) mustEmbedUnimplementedAdminSessionServiceServer() {}
func (UnimplementedAdminSessionServiceServer) testEmbeddedByValue()                             {}

// UnsafeAdminSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminSessionServiceServer will
// result in compilation errors.
type UnsafeAdminSessionServiceServer interface {
	mustEmbedUnimplementedAdminSessionServiceServer()
}

func RegisterAdminSessionServiceServer(s grpc.ServiceRegistrar, srv AdminSessionServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminSessionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminSessionService_ServiceDesc, srv)
}

func _AdminSessionService_ValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSessionServiceServer).ValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminSessionService_ValidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSessionServiceServer).ValidateSession(ctx, req.(*ValidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSessionService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSessionServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminSessionService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSessionServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSessionService_UpdateSessionActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSessionServiceServer).UpdateSessionActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminSessionService_UpdateSessionActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSessionServiceServer).UpdateSessionActivity(ctx, req.(*UpdateSessionActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSessionService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSessionServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminSessionService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSessionServiceServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSessionService_DeleteAllSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSessionServiceServer).DeleteAllSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminSessionService_DeleteAllSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSessionServiceServer).DeleteAllSessions(ctx, req.(*DeleteAllSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSessionService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSessionServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminSessionService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSessionServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminSessionService_DeleteSessionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSessionServiceServer).DeleteSessionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminSessionService_DeleteSessionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSessionServiceServer).DeleteSessionByID(ctx, req.(*DeleteSessionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminSessionService_ServiceDesc is the grpc.ServiceDesc for AdminSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.session.AdminSessionService",
	HandlerType: (*AdminSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateSession",
			Handler:    _AdminSessionService_ValidateSession_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _AdminSessionService_CreateSession_Handler,
		},
		{
			MethodName: "UpdateSessionActivity",
			Handler:    _AdminSessionService_UpdateSessionActivity_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _AdminSessionService_DeleteSession_Handler,
		},
		{
			MethodName: "DeleteAllSessions",
			Handler:    _AdminSessionService_DeleteAllSessions_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _AdminSessionService_ListSessions_Handler,
		},
		{
			MethodName: "DeleteSessionByID",
			Handler:    _AdminSessionService_DeleteSessionByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admin/session.proto",
}
