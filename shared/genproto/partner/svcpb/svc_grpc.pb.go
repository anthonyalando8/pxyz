// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: proto/partner/svc.proto

package partnersvcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartnerService_CreatePartner_FullMethodName        = "/partner.svc.PartnerService/CreatePartner"
	PartnerService_UpdatePartner_FullMethodName        = "/partner.svc.PartnerService/UpdatePartner"
	PartnerService_DeletePartner_FullMethodName        = "/partner.svc.PartnerService/DeletePartner"
	PartnerService_CreatePartnerUser_FullMethodName    = "/partner.svc.PartnerService/CreatePartnerUser"
	PartnerService_UpdatePartnerUser_FullMethodName    = "/partner.svc.PartnerService/UpdatePartnerUser"
	PartnerService_DeletePartnerUsers_FullMethodName   = "/partner.svc.PartnerService/DeletePartnerUsers"
	PartnerService_GetPartners_FullMethodName          = "/partner.svc.PartnerService/GetPartners"
	PartnerService_GetPartnerUsers_FullMethodName      = "/partner.svc.PartnerService/GetPartnerUsers"
	PartnerService_GetPartnersByService_FullMethodName = "/partner.svc.PartnerService/GetPartnersByService"
)

// PartnerServiceClient is the client API for PartnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// -------------------- Partner service --------------------
type PartnerServiceClient interface {
	CreatePartner(ctx context.Context, in *CreatePartnerRequest, opts ...grpc.CallOption) (*PartnerResponse, error)
	UpdatePartner(ctx context.Context, in *UpdatePartnerRequest, opts ...grpc.CallOption) (*PartnerResponse, error)
	DeletePartner(ctx context.Context, in *DeletePartnerRequest, opts ...grpc.CallOption) (*DeletePartnerResponse, error)
	// Partner User management
	CreatePartnerUser(ctx context.Context, in *CreatePartnerUserRequest, opts ...grpc.CallOption) (*PartnerUserResponse, error)
	UpdatePartnerUser(ctx context.Context, in *UpdatePartnerUserRequest, opts ...grpc.CallOption) (*PartnerUserResponse, error)
	// Bulk delete partner users
	DeletePartnerUsers(ctx context.Context, in *DeletePartnerUsersRequest, opts ...grpc.CallOption) (*DeletePartnerUsersResponse, error)
	// Fetch partners (optionally filtered by IDs)
	GetPartners(ctx context.Context, in *GetPartnersRequest, opts ...grpc.CallOption) (*GetPartnersResponse, error)
	// Fetch users under a specific partner
	GetPartnerUsers(ctx context.Context, in *GetPartnerUsersRequest, opts ...grpc.CallOption) (*GetPartnerUsersResponse, error)
	// NEW: Fetch partners who provide a specific service
	GetPartnersByService(ctx context.Context, in *GetPartnersByServiceRequest, opts ...grpc.CallOption) (*GetPartnersResponse, error)
}

type partnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerServiceClient(cc grpc.ClientConnInterface) PartnerServiceClient {
	return &partnerServiceClient{cc}
}

func (c *partnerServiceClient) CreatePartner(ctx context.Context, in *CreatePartnerRequest, opts ...grpc.CallOption) (*PartnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerResponse)
	err := c.cc.Invoke(ctx, PartnerService_CreatePartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) UpdatePartner(ctx context.Context, in *UpdatePartnerRequest, opts ...grpc.CallOption) (*PartnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerResponse)
	err := c.cc.Invoke(ctx, PartnerService_UpdatePartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) DeletePartner(ctx context.Context, in *DeletePartnerRequest, opts ...grpc.CallOption) (*DeletePartnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePartnerResponse)
	err := c.cc.Invoke(ctx, PartnerService_DeletePartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) CreatePartnerUser(ctx context.Context, in *CreatePartnerUserRequest, opts ...grpc.CallOption) (*PartnerUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerUserResponse)
	err := c.cc.Invoke(ctx, PartnerService_CreatePartnerUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) UpdatePartnerUser(ctx context.Context, in *UpdatePartnerUserRequest, opts ...grpc.CallOption) (*PartnerUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerUserResponse)
	err := c.cc.Invoke(ctx, PartnerService_UpdatePartnerUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) DeletePartnerUsers(ctx context.Context, in *DeletePartnerUsersRequest, opts ...grpc.CallOption) (*DeletePartnerUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePartnerUsersResponse)
	err := c.cc.Invoke(ctx, PartnerService_DeletePartnerUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) GetPartners(ctx context.Context, in *GetPartnersRequest, opts ...grpc.CallOption) (*GetPartnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartnersResponse)
	err := c.cc.Invoke(ctx, PartnerService_GetPartners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) GetPartnerUsers(ctx context.Context, in *GetPartnerUsersRequest, opts ...grpc.CallOption) (*GetPartnerUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartnerUsersResponse)
	err := c.cc.Invoke(ctx, PartnerService_GetPartnerUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) GetPartnersByService(ctx context.Context, in *GetPartnersByServiceRequest, opts ...grpc.CallOption) (*GetPartnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartnersResponse)
	err := c.cc.Invoke(ctx, PartnerService_GetPartnersByService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerServiceServer is the server API for PartnerService service.
// All implementations must embed UnimplementedPartnerServiceServer
// for forward compatibility.
//
// -------------------- Partner service --------------------
type PartnerServiceServer interface {
	CreatePartner(context.Context, *CreatePartnerRequest) (*PartnerResponse, error)
	UpdatePartner(context.Context, *UpdatePartnerRequest) (*PartnerResponse, error)
	DeletePartner(context.Context, *DeletePartnerRequest) (*DeletePartnerResponse, error)
	// Partner User management
	CreatePartnerUser(context.Context, *CreatePartnerUserRequest) (*PartnerUserResponse, error)
	UpdatePartnerUser(context.Context, *UpdatePartnerUserRequest) (*PartnerUserResponse, error)
	// Bulk delete partner users
	DeletePartnerUsers(context.Context, *DeletePartnerUsersRequest) (*DeletePartnerUsersResponse, error)
	// Fetch partners (optionally filtered by IDs)
	GetPartners(context.Context, *GetPartnersRequest) (*GetPartnersResponse, error)
	// Fetch users under a specific partner
	GetPartnerUsers(context.Context, *GetPartnerUsersRequest) (*GetPartnerUsersResponse, error)
	// NEW: Fetch partners who provide a specific service
	GetPartnersByService(context.Context, *GetPartnersByServiceRequest) (*GetPartnersResponse, error)
	mustEmbedUnimplementedPartnerServiceServer()
}

// UnimplementedPartnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartnerServiceServer struct{}

func (UnimplementedPartnerServiceServer) CreatePartner(context.Context, *CreatePartnerRequest) (*PartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartner not implemented")
}
func (UnimplementedPartnerServiceServer) UpdatePartner(context.Context, *UpdatePartnerRequest) (*PartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartner not implemented")
}
func (UnimplementedPartnerServiceServer) DeletePartner(context.Context, *DeletePartnerRequest) (*DeletePartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartner not implemented")
}
func (UnimplementedPartnerServiceServer) CreatePartnerUser(context.Context, *CreatePartnerUserRequest) (*PartnerUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartnerUser not implemented")
}
func (UnimplementedPartnerServiceServer) UpdatePartnerUser(context.Context, *UpdatePartnerUserRequest) (*PartnerUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartnerUser not implemented")
}
func (UnimplementedPartnerServiceServer) DeletePartnerUsers(context.Context, *DeletePartnerUsersRequest) (*DeletePartnerUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartnerUsers not implemented")
}
func (UnimplementedPartnerServiceServer) GetPartners(context.Context, *GetPartnersRequest) (*GetPartnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartners not implemented")
}
func (UnimplementedPartnerServiceServer) GetPartnerUsers(context.Context, *GetPartnerUsersRequest) (*GetPartnerUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerUsers not implemented")
}
func (UnimplementedPartnerServiceServer) GetPartnersByService(context.Context, *GetPartnersByServiceRequest) (*GetPartnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnersByService not implemented")
}
func (UnimplementedPartnerServiceServer) mustEmbedUnimplementedPartnerServiceServer() {}
func (UnimplementedPartnerServiceServer) testEmbeddedByValue()                        {}

// UnsafePartnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerServiceServer will
// result in compilation errors.
type UnsafePartnerServiceServer interface {
	mustEmbedUnimplementedPartnerServiceServer()
}

func RegisterPartnerServiceServer(s grpc.ServiceRegistrar, srv PartnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartnerService_ServiceDesc, srv)
}

func _PartnerService_CreatePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).CreatePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_CreatePartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).CreatePartner(ctx, req.(*CreatePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_UpdatePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).UpdatePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_UpdatePartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).UpdatePartner(ctx, req.(*UpdatePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_DeletePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).DeletePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_DeletePartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).DeletePartner(ctx, req.(*DeletePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_CreatePartnerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnerUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).CreatePartnerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_CreatePartnerUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).CreatePartnerUser(ctx, req.(*CreatePartnerUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_UpdatePartnerUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).UpdatePartnerUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_UpdatePartnerUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).UpdatePartnerUser(ctx, req.(*UpdatePartnerUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_DeletePartnerUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartnerUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).DeletePartnerUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_DeletePartnerUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).DeletePartnerUsers(ctx, req.(*DeletePartnerUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_GetPartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).GetPartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_GetPartners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).GetPartners(ctx, req.(*GetPartnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_GetPartnerUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).GetPartnerUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_GetPartnerUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).GetPartnerUsers(ctx, req.(*GetPartnerUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_GetPartnersByService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnersByServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).GetPartnersByService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerService_GetPartnersByService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).GetPartnersByService(ctx, req.(*GetPartnersByServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerService_ServiceDesc is the grpc.ServiceDesc for PartnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partner.svc.PartnerService",
	HandlerType: (*PartnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePartner",
			Handler:    _PartnerService_CreatePartner_Handler,
		},
		{
			MethodName: "UpdatePartner",
			Handler:    _PartnerService_UpdatePartner_Handler,
		},
		{
			MethodName: "DeletePartner",
			Handler:    _PartnerService_DeletePartner_Handler,
		},
		{
			MethodName: "CreatePartnerUser",
			Handler:    _PartnerService_CreatePartnerUser_Handler,
		},
		{
			MethodName: "UpdatePartnerUser",
			Handler:    _PartnerService_UpdatePartnerUser_Handler,
		},
		{
			MethodName: "DeletePartnerUsers",
			Handler:    _PartnerService_DeletePartnerUsers_Handler,
		},
		{
			MethodName: "GetPartners",
			Handler:    _PartnerService_GetPartners_Handler,
		},
		{
			MethodName: "GetPartnerUsers",
			Handler:    _PartnerService_GetPartnerUsers_Handler,
		},
		{
			MethodName: "GetPartnersByService",
			Handler:    _PartnerService_GetPartnersByService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partner/svc.proto",
}
