// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: proto/partner/auth.proto

package partnerauthpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartnerAuthService_RegisterUser_FullMethodName      = "/partner.auth.PartnerAuthService/RegisterUser"
	PartnerAuthService_GetUserProfile_FullMethodName    = "/partner.auth.PartnerAuthService/GetUserProfile"
	PartnerAuthService_DeleteUser_FullMethodName        = "/partner.auth.PartnerAuthService/DeleteUser"
	PartnerAuthService_GetUsersByPartner_FullMethodName = "/partner.auth.PartnerAuthService/GetUsersByPartner"
)

// PartnerAuthServiceClient is the client API for PartnerAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerAuthServiceClient interface {
	// Register a new user (basic fields only)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	// Get full user profile by ID
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// Delete a user and all associated auth records
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	GetUsersByPartner(ctx context.Context, in *GetUsersByPartnerRequest, opts ...grpc.CallOption) (*GetUsersByPartnerResponse, error)
}

type partnerAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerAuthServiceClient(cc grpc.ClientConnInterface) PartnerAuthServiceClient {
	return &partnerAuthServiceClient{cc}
}

func (c *partnerAuthServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, PartnerAuthService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAuthServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, PartnerAuthService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAuthServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, PartnerAuthService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerAuthServiceClient) GetUsersByPartner(ctx context.Context, in *GetUsersByPartnerRequest, opts ...grpc.CallOption) (*GetUsersByPartnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersByPartnerResponse)
	err := c.cc.Invoke(ctx, PartnerAuthService_GetUsersByPartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerAuthServiceServer is the server API for PartnerAuthService service.
// All implementations must embed UnimplementedPartnerAuthServiceServer
// for forward compatibility.
type PartnerAuthServiceServer interface {
	// Register a new user (basic fields only)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	// Get full user profile by ID
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// Delete a user and all associated auth records
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetUsersByPartner(context.Context, *GetUsersByPartnerRequest) (*GetUsersByPartnerResponse, error)
	mustEmbedUnimplementedPartnerAuthServiceServer()
}

// UnimplementedPartnerAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartnerAuthServiceServer struct{}

func (UnimplementedPartnerAuthServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedPartnerAuthServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedPartnerAuthServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedPartnerAuthServiceServer) GetUsersByPartner(context.Context, *GetUsersByPartnerRequest) (*GetUsersByPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByPartner not implemented")
}
func (UnimplementedPartnerAuthServiceServer) mustEmbedUnimplementedPartnerAuthServiceServer() {}
func (UnimplementedPartnerAuthServiceServer) testEmbeddedByValue()                            {}

// UnsafePartnerAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerAuthServiceServer will
// result in compilation errors.
type UnsafePartnerAuthServiceServer interface {
	mustEmbedUnimplementedPartnerAuthServiceServer()
}

func RegisterPartnerAuthServiceServer(s grpc.ServiceRegistrar, srv PartnerAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartnerAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartnerAuthService_ServiceDesc, srv)
}

func _PartnerAuthService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAuthServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerAuthService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAuthServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerAuthService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAuthServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerAuthService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAuthServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerAuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerAuthService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerAuthService_GetUsersByPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerAuthServiceServer).GetUsersByPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerAuthService_GetUsersByPartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerAuthServiceServer).GetUsersByPartner(ctx, req.(*GetUsersByPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerAuthService_ServiceDesc is the grpc.ServiceDesc for PartnerAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partner.auth.PartnerAuthService",
	HandlerType: (*PartnerAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _PartnerAuthService_RegisterUser_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _PartnerAuthService_GetUserProfile_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _PartnerAuthService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUsersByPartner",
			Handler:    _PartnerAuthService_GetUsersByPartner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/partner/auth.proto",
}
