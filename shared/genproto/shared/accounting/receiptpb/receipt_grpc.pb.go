// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: proto/shared/accounting/receipt.proto

package receiptpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReceiptService_CreateReceipt_FullMethodName         = "/receiptpb.ReceiptService/CreateReceipt"
	ReceiptService_GetReceiptByCode_FullMethodName      = "/receiptpb.ReceiptService/GetReceiptByCode"
	ReceiptService_ListReceiptsByAccount_FullMethodName = "/receiptpb.ReceiptService/ListReceiptsByAccount"
)

// ReceiptServiceClient is the client API for ReceiptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ================= Service Definition =================
type ReceiptServiceClient interface {
	// Create a new receipt
	CreateReceipt(ctx context.Context, in *CreateReceiptRequest, opts ...grpc.CallOption) (*CreateReceiptResponse, error)
	// Optionally: fetch receipt by code
	GetReceiptByCode(ctx context.Context, in *GetReceiptByCodeRequest, opts ...grpc.CallOption) (*Receipt, error)
	// Optionally: list receipts by account
	ListReceiptsByAccount(ctx context.Context, in *ListReceiptsByAccountRequest, opts ...grpc.CallOption) (*ListReceiptsByAccountResponse, error)
}

type receiptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiptServiceClient(cc grpc.ClientConnInterface) ReceiptServiceClient {
	return &receiptServiceClient{cc}
}

func (c *receiptServiceClient) CreateReceipt(ctx context.Context, in *CreateReceiptRequest, opts ...grpc.CallOption) (*CreateReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_CreateReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) GetReceiptByCode(ctx context.Context, in *GetReceiptByCodeRequest, opts ...grpc.CallOption) (*Receipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Receipt)
	err := c.cc.Invoke(ctx, ReceiptService_GetReceiptByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) ListReceiptsByAccount(ctx context.Context, in *ListReceiptsByAccountRequest, opts ...grpc.CallOption) (*ListReceiptsByAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReceiptsByAccountResponse)
	err := c.cc.Invoke(ctx, ReceiptService_ListReceiptsByAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiptServiceServer is the server API for ReceiptService service.
// All implementations must embed UnimplementedReceiptServiceServer
// for forward compatibility.
//
// ================= Service Definition =================
type ReceiptServiceServer interface {
	// Create a new receipt
	CreateReceipt(context.Context, *CreateReceiptRequest) (*CreateReceiptResponse, error)
	// Optionally: fetch receipt by code
	GetReceiptByCode(context.Context, *GetReceiptByCodeRequest) (*Receipt, error)
	// Optionally: list receipts by account
	ListReceiptsByAccount(context.Context, *ListReceiptsByAccountRequest) (*ListReceiptsByAccountResponse, error)
	mustEmbedUnimplementedReceiptServiceServer()
}

// UnimplementedReceiptServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiptServiceServer struct{}

func (UnimplementedReceiptServiceServer) CreateReceipt(context.Context, *CreateReceiptRequest) (*CreateReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) GetReceiptByCode(context.Context, *GetReceiptByCodeRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptByCode not implemented")
}
func (UnimplementedReceiptServiceServer) ListReceiptsByAccount(context.Context, *ListReceiptsByAccountRequest) (*ListReceiptsByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceiptsByAccount not implemented")
}
func (UnimplementedReceiptServiceServer) mustEmbedUnimplementedReceiptServiceServer() {}
func (UnimplementedReceiptServiceServer) testEmbeddedByValue()                        {}

// UnsafeReceiptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiptServiceServer will
// result in compilation errors.
type UnsafeReceiptServiceServer interface {
	mustEmbedUnimplementedReceiptServiceServer()
}

func RegisterReceiptServiceServer(s grpc.ServiceRegistrar, srv ReceiptServiceServer) {
	// If the following call pancis, it indicates UnimplementedReceiptServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceiptService_ServiceDesc, srv)
}

func _ReceiptService_CreateReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).CreateReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_CreateReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).CreateReceipt(ctx, req.(*CreateReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_GetReceiptByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).GetReceiptByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_GetReceiptByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).GetReceiptByCode(ctx, req.(*GetReceiptByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_ListReceiptsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReceiptsByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).ListReceiptsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_ListReceiptsByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).ListReceiptsByAccount(ctx, req.(*ListReceiptsByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiptService_ServiceDesc is the grpc.ServiceDesc for ReceiptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "receiptpb.ReceiptService",
	HandlerType: (*ReceiptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReceipt",
			Handler:    _ReceiptService_CreateReceipt_Handler,
		},
		{
			MethodName: "GetReceiptByCode",
			Handler:    _ReceiptService_GetReceiptByCode_Handler,
		},
		{
			MethodName: "ListReceiptsByAccount",
			Handler:    _ReceiptService_ListReceiptsByAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shared/accounting/receipt.proto",
}
