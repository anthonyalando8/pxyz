// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: proto/shared/accounting/receipt_v2.proto

package receiptpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReceiptServiceV2_CreateReceipt_FullMethodName    = "/accounting.receipt.v2.ReceiptServiceV2/CreateReceipt"
	ReceiptServiceV2_CreateReceipts_FullMethodName   = "/accounting.receipt.v2.ReceiptServiceV2/CreateReceipts"
	ReceiptServiceV2_GetReceiptByCode_FullMethodName = "/accounting.receipt.v2.ReceiptServiceV2/GetReceiptByCode"
	ReceiptServiceV2_UpdateReceipt_FullMethodName    = "/accounting.receipt.v2.ReceiptServiceV2/UpdateReceipt"
	ReceiptServiceV2_UpdateReceipts_FullMethodName   = "/accounting.receipt.v2.ReceiptServiceV2/UpdateReceipts"
)

// ReceiptServiceV2Client is the client API for ReceiptServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===============================
// Service
// ===============================
type ReceiptServiceV2Client interface {
	// Create
	CreateReceipt(ctx context.Context, in *CreateReceiptRequest, opts ...grpc.CallOption) (*CreateReceiptResponse, error)
	CreateReceipts(ctx context.Context, in *CreateReceiptsRequest, opts ...grpc.CallOption) (*CreateReceiptsResponse, error)
	// Get
	GetReceiptByCode(ctx context.Context, in *GetReceiptByCodeRequest, opts ...grpc.CallOption) (*Receipt, error)
	// Update
	UpdateReceipt(ctx context.Context, in *UpdateReceiptRequest, opts ...grpc.CallOption) (*UpdateReceiptResponse, error)
	UpdateReceipts(ctx context.Context, in *UpdateReceiptsRequest, opts ...grpc.CallOption) (*UpdateReceiptsResponse, error)
}

type receiptServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewReceiptServiceV2Client(cc grpc.ClientConnInterface) ReceiptServiceV2Client {
	return &receiptServiceV2Client{cc}
}

func (c *receiptServiceV2Client) CreateReceipt(ctx context.Context, in *CreateReceiptRequest, opts ...grpc.CallOption) (*CreateReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptServiceV2_CreateReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceV2Client) CreateReceipts(ctx context.Context, in *CreateReceiptsRequest, opts ...grpc.CallOption) (*CreateReceiptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReceiptsResponse)
	err := c.cc.Invoke(ctx, ReceiptServiceV2_CreateReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceV2Client) GetReceiptByCode(ctx context.Context, in *GetReceiptByCodeRequest, opts ...grpc.CallOption) (*Receipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Receipt)
	err := c.cc.Invoke(ctx, ReceiptServiceV2_GetReceiptByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceV2Client) UpdateReceipt(ctx context.Context, in *UpdateReceiptRequest, opts ...grpc.CallOption) (*UpdateReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptServiceV2_UpdateReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceV2Client) UpdateReceipts(ctx context.Context, in *UpdateReceiptsRequest, opts ...grpc.CallOption) (*UpdateReceiptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReceiptsResponse)
	err := c.cc.Invoke(ctx, ReceiptServiceV2_UpdateReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiptServiceV2Server is the server API for ReceiptServiceV2 service.
// All implementations must embed UnimplementedReceiptServiceV2Server
// for forward compatibility.
//
// ===============================
// Service
// ===============================
type ReceiptServiceV2Server interface {
	// Create
	CreateReceipt(context.Context, *CreateReceiptRequest) (*CreateReceiptResponse, error)
	CreateReceipts(context.Context, *CreateReceiptsRequest) (*CreateReceiptsResponse, error)
	// Get
	GetReceiptByCode(context.Context, *GetReceiptByCodeRequest) (*Receipt, error)
	// Update
	UpdateReceipt(context.Context, *UpdateReceiptRequest) (*UpdateReceiptResponse, error)
	UpdateReceipts(context.Context, *UpdateReceiptsRequest) (*UpdateReceiptsResponse, error)
	mustEmbedUnimplementedReceiptServiceV2Server()
}

// UnimplementedReceiptServiceV2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiptServiceV2Server struct{}

func (UnimplementedReceiptServiceV2Server) CreateReceipt(context.Context, *CreateReceiptRequest) (*CreateReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceipt not implemented")
}
func (UnimplementedReceiptServiceV2Server) CreateReceipts(context.Context, *CreateReceiptsRequest) (*CreateReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReceipts not implemented")
}
func (UnimplementedReceiptServiceV2Server) GetReceiptByCode(context.Context, *GetReceiptByCodeRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptByCode not implemented")
}
func (UnimplementedReceiptServiceV2Server) UpdateReceipt(context.Context, *UpdateReceiptRequest) (*UpdateReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceipt not implemented")
}
func (UnimplementedReceiptServiceV2Server) UpdateReceipts(context.Context, *UpdateReceiptsRequest) (*UpdateReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceipts not implemented")
}
func (UnimplementedReceiptServiceV2Server) mustEmbedUnimplementedReceiptServiceV2Server() {}
func (UnimplementedReceiptServiceV2Server) testEmbeddedByValue()                          {}

// UnsafeReceiptServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiptServiceV2Server will
// result in compilation errors.
type UnsafeReceiptServiceV2Server interface {
	mustEmbedUnimplementedReceiptServiceV2Server()
}

func RegisterReceiptServiceV2Server(s grpc.ServiceRegistrar, srv ReceiptServiceV2Server) {
	// If the following call pancis, it indicates UnimplementedReceiptServiceV2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceiptServiceV2_ServiceDesc, srv)
}

func _ReceiptServiceV2_CreateReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceV2Server).CreateReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptServiceV2_CreateReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceV2Server).CreateReceipt(ctx, req.(*CreateReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptServiceV2_CreateReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceV2Server).CreateReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptServiceV2_CreateReceipts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceV2Server).CreateReceipts(ctx, req.(*CreateReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptServiceV2_GetReceiptByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceV2Server).GetReceiptByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptServiceV2_GetReceiptByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceV2Server).GetReceiptByCode(ctx, req.(*GetReceiptByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptServiceV2_UpdateReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceV2Server).UpdateReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptServiceV2_UpdateReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceV2Server).UpdateReceipt(ctx, req.(*UpdateReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptServiceV2_UpdateReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceV2Server).UpdateReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptServiceV2_UpdateReceipts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceV2Server).UpdateReceipts(ctx, req.(*UpdateReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiptServiceV2_ServiceDesc is the grpc.ServiceDesc for ReceiptServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiptServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting.receipt.v2.ReceiptServiceV2",
	HandlerType: (*ReceiptServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReceipt",
			Handler:    _ReceiptServiceV2_CreateReceipt_Handler,
		},
		{
			MethodName: "CreateReceipts",
			Handler:    _ReceiptServiceV2_CreateReceipts_Handler,
		},
		{
			MethodName: "GetReceiptByCode",
			Handler:    _ReceiptServiceV2_GetReceiptByCode_Handler,
		},
		{
			MethodName: "UpdateReceipt",
			Handler:    _ReceiptServiceV2_UpdateReceipt_Handler,
		},
		{
			MethodName: "UpdateReceipts",
			Handler:    _ReceiptServiceV2_UpdateReceipts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shared/accounting/receipt_v2.proto",
}
