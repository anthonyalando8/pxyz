// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: proto/shared/accounting/account.proto

package accountingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountingService_CreateAccounts_FullMethodName      = "/accounting.AccountingService/CreateAccounts"
	AccountingService_GetUserAccounts_FullMethodName     = "/accounting.AccountingService/GetUserAccounts"
	AccountingService_PostTransaction_FullMethodName     = "/accounting.AccountingService/PostTransaction"
	AccountingService_GetAccountStatement_FullMethodName = "/accounting.AccountingService/GetAccountStatement"
	AccountingService_GetOwnerStatement_FullMethodName   = "/accounting.AccountingService/GetOwnerStatement"
	AccountingService_GetJournalPostings_FullMethodName  = "/accounting.AccountingService/GetJournalPostings"
	AccountingService_GenerateDailyReport_FullMethodName = "/accounting.AccountingService/GenerateDailyReport"
)

// AccountingServiceClient is the client API for AccountingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===============================
// SERVICE
// ===============================
type AccountingServiceClient interface {
	// Accounts
	CreateAccounts(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	GetUserAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	// Transactions
	PostTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// Statements
	GetAccountStatement(ctx context.Context, in *AccountStatementRequest, opts ...grpc.CallOption) (*AccountStatement, error)
	GetOwnerStatement(ctx context.Context, in *OwnerStatementRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AccountStatement], error)
	// Journal
	GetJournalPostings(ctx context.Context, in *JournalPostingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Posting], error)
	// Reports
	GenerateDailyReport(ctx context.Context, in *DailyReportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DailyReport], error)
}

type accountingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingServiceClient(cc grpc.ClientConnInterface) AccountingServiceClient {
	return &accountingServiceClient{cc}
}

func (c *accountingServiceClient) CreateAccounts(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, AccountingService_CreateAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetUserAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, AccountingService_GetUserAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) PostTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, AccountingService_PostTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetAccountStatement(ctx context.Context, in *AccountStatementRequest, opts ...grpc.CallOption) (*AccountStatement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountStatement)
	err := c.cc.Invoke(ctx, AccountingService_GetAccountStatement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingServiceClient) GetOwnerStatement(ctx context.Context, in *OwnerStatementRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AccountStatement], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AccountingService_ServiceDesc.Streams[0], AccountingService_GetOwnerStatement_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OwnerStatementRequest, AccountStatement]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountingService_GetOwnerStatementClient = grpc.ServerStreamingClient[AccountStatement]

func (c *accountingServiceClient) GetJournalPostings(ctx context.Context, in *JournalPostingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Posting], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AccountingService_ServiceDesc.Streams[1], AccountingService_GetJournalPostings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JournalPostingsRequest, Posting]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountingService_GetJournalPostingsClient = grpc.ServerStreamingClient[Posting]

func (c *accountingServiceClient) GenerateDailyReport(ctx context.Context, in *DailyReportRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DailyReport], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AccountingService_ServiceDesc.Streams[2], AccountingService_GenerateDailyReport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DailyReportRequest, DailyReport]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountingService_GenerateDailyReportClient = grpc.ServerStreamingClient[DailyReport]

// AccountingServiceServer is the server API for AccountingService service.
// All implementations must embed UnimplementedAccountingServiceServer
// for forward compatibility.
//
// ===============================
// SERVICE
// ===============================
type AccountingServiceServer interface {
	// Accounts
	CreateAccounts(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	GetUserAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	// Transactions
	PostTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// Statements
	GetAccountStatement(context.Context, *AccountStatementRequest) (*AccountStatement, error)
	GetOwnerStatement(*OwnerStatementRequest, grpc.ServerStreamingServer[AccountStatement]) error
	// Journal
	GetJournalPostings(*JournalPostingsRequest, grpc.ServerStreamingServer[Posting]) error
	// Reports
	GenerateDailyReport(*DailyReportRequest, grpc.ServerStreamingServer[DailyReport]) error
	mustEmbedUnimplementedAccountingServiceServer()
}

// UnimplementedAccountingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountingServiceServer struct{}

func (UnimplementedAccountingServiceServer) CreateAccounts(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccounts not implemented")
}
func (UnimplementedAccountingServiceServer) GetUserAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccounts not implemented")
}
func (UnimplementedAccountingServiceServer) PostTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTransaction not implemented")
}
func (UnimplementedAccountingServiceServer) GetAccountStatement(context.Context, *AccountStatementRequest) (*AccountStatement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountStatement not implemented")
}
func (UnimplementedAccountingServiceServer) GetOwnerStatement(*OwnerStatementRequest, grpc.ServerStreamingServer[AccountStatement]) error {
	return status.Errorf(codes.Unimplemented, "method GetOwnerStatement not implemented")
}
func (UnimplementedAccountingServiceServer) GetJournalPostings(*JournalPostingsRequest, grpc.ServerStreamingServer[Posting]) error {
	return status.Errorf(codes.Unimplemented, "method GetJournalPostings not implemented")
}
func (UnimplementedAccountingServiceServer) GenerateDailyReport(*DailyReportRequest, grpc.ServerStreamingServer[DailyReport]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateDailyReport not implemented")
}
func (UnimplementedAccountingServiceServer) mustEmbedUnimplementedAccountingServiceServer() {}
func (UnimplementedAccountingServiceServer) testEmbeddedByValue()                           {}

// UnsafeAccountingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServiceServer will
// result in compilation errors.
type UnsafeAccountingServiceServer interface {
	mustEmbedUnimplementedAccountingServiceServer()
}

func RegisterAccountingServiceServer(s grpc.ServiceRegistrar, srv AccountingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountingService_ServiceDesc, srv)
}

func _AccountingService_CreateAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).CreateAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_CreateAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).CreateAccounts(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetUserAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetUserAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetUserAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetUserAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_PostTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).PostTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_PostTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).PostTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetAccountStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServiceServer).GetAccountStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountingService_GetAccountStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServiceServer).GetAccountStatement(ctx, req.(*AccountStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountingService_GetOwnerStatement_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OwnerStatementRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountingServiceServer).GetOwnerStatement(m, &grpc.GenericServerStream[OwnerStatementRequest, AccountStatement]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountingService_GetOwnerStatementServer = grpc.ServerStreamingServer[AccountStatement]

func _AccountingService_GetJournalPostings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JournalPostingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountingServiceServer).GetJournalPostings(m, &grpc.GenericServerStream[JournalPostingsRequest, Posting]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountingService_GetJournalPostingsServer = grpc.ServerStreamingServer[Posting]

func _AccountingService_GenerateDailyReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DailyReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountingServiceServer).GenerateDailyReport(m, &grpc.GenericServerStream[DailyReportRequest, DailyReport]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccountingService_GenerateDailyReportServer = grpc.ServerStreamingServer[DailyReport]

// AccountingService_ServiceDesc is the grpc.ServiceDesc for AccountingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting.AccountingService",
	HandlerType: (*AccountingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccounts",
			Handler:    _AccountingService_CreateAccounts_Handler,
		},
		{
			MethodName: "GetUserAccounts",
			Handler:    _AccountingService_GetUserAccounts_Handler,
		},
		{
			MethodName: "PostTransaction",
			Handler:    _AccountingService_PostTransaction_Handler,
		},
		{
			MethodName: "GetAccountStatement",
			Handler:    _AccountingService_GetAccountStatement_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOwnerStatement",
			Handler:       _AccountingService_GetOwnerStatement_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetJournalPostings",
			Handler:       _AccountingService_GetJournalPostings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateDailyReport",
			Handler:       _AccountingService_GenerateDailyReport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/shared/accounting/account.proto",
}
