// security_audit.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: services/authentication/audit-service/proto/audit.proto

package grpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecurityAuditService_CheckAccountLockStatus_FullMethodName        = "/auth.audit.security.SecurityAuditService/CheckAccountLockStatus"
	SecurityAuditService_CheckAccountsLockStatus_FullMethodName       = "/auth.audit.security.SecurityAuditService/CheckAccountsLockStatus"
	SecurityAuditService_UnlockAccount_FullMethodName                 = "/auth.audit.security.SecurityAuditService/UnlockAccount"
	SecurityAuditService_UnlockAccounts_FullMethodName                = "/auth.audit.security.SecurityAuditService/UnlockAccounts"
	SecurityAuditService_DetectSuspiciousActivity_FullMethodName      = "/auth.audit.security.SecurityAuditService/DetectSuspiciousActivity"
	SecurityAuditService_ReportSuspiciousActivity_FullMethodName      = "/auth.audit.security.SecurityAuditService/ReportSuspiciousActivity"
	SecurityAuditService_ReportSuspiciousActivities_FullMethodName    = "/auth.audit.security.SecurityAuditService/ReportSuspiciousActivities"
	SecurityAuditService_ResolveSuspiciousActivity_FullMethodName     = "/auth.audit.security.SecurityAuditService/ResolveSuspiciousActivity"
	SecurityAuditService_ResolveSuspiciousActivities_FullMethodName   = "/auth.audit.security.SecurityAuditService/ResolveSuspiciousActivities"
	SecurityAuditService_GetActiveSuspiciousActivities_FullMethodName = "/auth.audit.security.SecurityAuditService/GetActiveSuspiciousActivities"
	SecurityAuditService_GetHighRiskUsers_FullMethodName              = "/auth.audit.security.SecurityAuditService/GetHighRiskUsers"
	SecurityAuditService_GetUserAuditHistory_FullMethodName           = "/auth.audit.security.SecurityAuditService/GetUserAuditHistory"
	SecurityAuditService_GetUsersAuditHistory_FullMethodName          = "/auth.audit.security.SecurityAuditService/GetUsersAuditHistory"
	SecurityAuditService_QueryAuditLogs_FullMethodName                = "/auth.audit.security.SecurityAuditService/QueryAuditLogs"
	SecurityAuditService_GetCriticalEvents_FullMethodName             = "/auth.audit.security.SecurityAuditService/GetCriticalEvents"
	SecurityAuditService_GetSecuritySummary_FullMethodName            = "/auth.audit.security.SecurityAuditService/GetSecuritySummary"
	SecurityAuditService_GetUserRiskScore_FullMethodName              = "/auth.audit.security.SecurityAuditService/GetUserRiskScore"
	SecurityAuditService_GetUsersRiskScores_FullMethodName            = "/auth.audit.security.SecurityAuditService/GetUsersRiskScores"
	SecurityAuditService_CheckRateLimit_FullMethodName                = "/auth.audit.security.SecurityAuditService/CheckRateLimit"
	SecurityAuditService_CheckRateLimits_FullMethodName               = "/auth.audit.security.SecurityAuditService/CheckRateLimits"
)

// SecurityAuditServiceClient is the client API for SecurityAuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityAuditServiceClient interface {
	// Account Lock Management
	CheckAccountLockStatus(ctx context.Context, in *CheckAccountLockStatusRequest, opts ...grpc.CallOption) (*CheckAccountLockStatusResponse, error)
	CheckAccountsLockStatus(ctx context.Context, in *CheckAccountsLockStatusRequest, opts ...grpc.CallOption) (*CheckAccountsLockStatusResponse, error)
	UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error)
	UnlockAccounts(ctx context.Context, in *UnlockAccountsRequest, opts ...grpc.CallOption) (*UnlockAccountsResponse, error)
	// Suspicious Activity Management
	DetectSuspiciousActivity(ctx context.Context, in *DetectSuspiciousActivityRequest, opts ...grpc.CallOption) (*DetectSuspiciousActivityResponse, error)
	ReportSuspiciousActivity(ctx context.Context, in *ReportSuspiciousActivityRequest, opts ...grpc.CallOption) (*ReportSuspiciousActivityResponse, error)
	ReportSuspiciousActivities(ctx context.Context, in *ReportSuspiciousActivitiesRequest, opts ...grpc.CallOption) (*ReportSuspiciousActivitiesResponse, error)
	ResolveSuspiciousActivity(ctx context.Context, in *ResolveSuspiciousActivityRequest, opts ...grpc.CallOption) (*ResolveSuspiciousActivityResponse, error)
	ResolveSuspiciousActivities(ctx context.Context, in *ResolveSuspiciousActivitiesRequest, opts ...grpc.CallOption) (*ResolveSuspiciousActivitiesResponse, error)
	GetActiveSuspiciousActivities(ctx context.Context, in *GetActiveSuspiciousActivitiesRequest, opts ...grpc.CallOption) (*GetActiveSuspiciousActivitiesResponse, error)
	GetHighRiskUsers(ctx context.Context, in *GetHighRiskUsersRequest, opts ...grpc.CallOption) (*GetHighRiskUsersResponse, error)
	// Audit Queries
	GetUserAuditHistory(ctx context.Context, in *GetUserAuditHistoryRequest, opts ...grpc.CallOption) (*GetUserAuditHistoryResponse, error)
	GetUsersAuditHistory(ctx context.Context, in *GetUsersAuditHistoryRequest, opts ...grpc.CallOption) (*GetUsersAuditHistoryResponse, error)
	QueryAuditLogs(ctx context.Context, in *QueryAuditLogsRequest, opts ...grpc.CallOption) (*QueryAuditLogsResponse, error)
	GetCriticalEvents(ctx context.Context, in *GetCriticalEventsRequest, opts ...grpc.CallOption) (*GetCriticalEventsResponse, error)
	GetSecuritySummary(ctx context.Context, in *GetSecuritySummaryRequest, opts ...grpc.CallOption) (*GetSecuritySummaryResponse, error)
	GetUserRiskScore(ctx context.Context, in *GetUserRiskScoreRequest, opts ...grpc.CallOption) (*GetUserRiskScoreResponse, error)
	GetUsersRiskScores(ctx context.Context, in *GetUsersRiskScoresRequest, opts ...grpc.CallOption) (*GetUsersRiskScoresResponse, error)
	// Rate Limiting
	CheckRateLimit(ctx context.Context, in *CheckRateLimitRequest, opts ...grpc.CallOption) (*CheckRateLimitResponse, error)
	CheckRateLimits(ctx context.Context, in *CheckRateLimitsRequest, opts ...grpc.CallOption) (*CheckRateLimitsResponse, error)
}

type securityAuditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityAuditServiceClient(cc grpc.ClientConnInterface) SecurityAuditServiceClient {
	return &securityAuditServiceClient{cc}
}

func (c *securityAuditServiceClient) CheckAccountLockStatus(ctx context.Context, in *CheckAccountLockStatusRequest, opts ...grpc.CallOption) (*CheckAccountLockStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAccountLockStatusResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_CheckAccountLockStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) CheckAccountsLockStatus(ctx context.Context, in *CheckAccountsLockStatusRequest, opts ...grpc.CallOption) (*CheckAccountsLockStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAccountsLockStatusResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_CheckAccountsLockStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockAccountResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_UnlockAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) UnlockAccounts(ctx context.Context, in *UnlockAccountsRequest, opts ...grpc.CallOption) (*UnlockAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockAccountsResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_UnlockAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) DetectSuspiciousActivity(ctx context.Context, in *DetectSuspiciousActivityRequest, opts ...grpc.CallOption) (*DetectSuspiciousActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectSuspiciousActivityResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_DetectSuspiciousActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) ReportSuspiciousActivity(ctx context.Context, in *ReportSuspiciousActivityRequest, opts ...grpc.CallOption) (*ReportSuspiciousActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportSuspiciousActivityResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_ReportSuspiciousActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) ReportSuspiciousActivities(ctx context.Context, in *ReportSuspiciousActivitiesRequest, opts ...grpc.CallOption) (*ReportSuspiciousActivitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportSuspiciousActivitiesResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_ReportSuspiciousActivities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) ResolveSuspiciousActivity(ctx context.Context, in *ResolveSuspiciousActivityRequest, opts ...grpc.CallOption) (*ResolveSuspiciousActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveSuspiciousActivityResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_ResolveSuspiciousActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) ResolveSuspiciousActivities(ctx context.Context, in *ResolveSuspiciousActivitiesRequest, opts ...grpc.CallOption) (*ResolveSuspiciousActivitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveSuspiciousActivitiesResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_ResolveSuspiciousActivities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) GetActiveSuspiciousActivities(ctx context.Context, in *GetActiveSuspiciousActivitiesRequest, opts ...grpc.CallOption) (*GetActiveSuspiciousActivitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveSuspiciousActivitiesResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_GetActiveSuspiciousActivities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) GetHighRiskUsers(ctx context.Context, in *GetHighRiskUsersRequest, opts ...grpc.CallOption) (*GetHighRiskUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHighRiskUsersResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_GetHighRiskUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) GetUserAuditHistory(ctx context.Context, in *GetUserAuditHistoryRequest, opts ...grpc.CallOption) (*GetUserAuditHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAuditHistoryResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_GetUserAuditHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) GetUsersAuditHistory(ctx context.Context, in *GetUsersAuditHistoryRequest, opts ...grpc.CallOption) (*GetUsersAuditHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersAuditHistoryResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_GetUsersAuditHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) QueryAuditLogs(ctx context.Context, in *QueryAuditLogsRequest, opts ...grpc.CallOption) (*QueryAuditLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAuditLogsResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_QueryAuditLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) GetCriticalEvents(ctx context.Context, in *GetCriticalEventsRequest, opts ...grpc.CallOption) (*GetCriticalEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCriticalEventsResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_GetCriticalEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) GetSecuritySummary(ctx context.Context, in *GetSecuritySummaryRequest, opts ...grpc.CallOption) (*GetSecuritySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecuritySummaryResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_GetSecuritySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) GetUserRiskScore(ctx context.Context, in *GetUserRiskScoreRequest, opts ...grpc.CallOption) (*GetUserRiskScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRiskScoreResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_GetUserRiskScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) GetUsersRiskScores(ctx context.Context, in *GetUsersRiskScoresRequest, opts ...grpc.CallOption) (*GetUsersRiskScoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersRiskScoresResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_GetUsersRiskScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) CheckRateLimit(ctx context.Context, in *CheckRateLimitRequest, opts ...grpc.CallOption) (*CheckRateLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckRateLimitResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_CheckRateLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityAuditServiceClient) CheckRateLimits(ctx context.Context, in *CheckRateLimitsRequest, opts ...grpc.CallOption) (*CheckRateLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckRateLimitsResponse)
	err := c.cc.Invoke(ctx, SecurityAuditService_CheckRateLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityAuditServiceServer is the server API for SecurityAuditService service.
// All implementations must embed UnimplementedSecurityAuditServiceServer
// for forward compatibility.
type SecurityAuditServiceServer interface {
	// Account Lock Management
	CheckAccountLockStatus(context.Context, *CheckAccountLockStatusRequest) (*CheckAccountLockStatusResponse, error)
	CheckAccountsLockStatus(context.Context, *CheckAccountsLockStatusRequest) (*CheckAccountsLockStatusResponse, error)
	UnlockAccount(context.Context, *UnlockAccountRequest) (*UnlockAccountResponse, error)
	UnlockAccounts(context.Context, *UnlockAccountsRequest) (*UnlockAccountsResponse, error)
	// Suspicious Activity Management
	DetectSuspiciousActivity(context.Context, *DetectSuspiciousActivityRequest) (*DetectSuspiciousActivityResponse, error)
	ReportSuspiciousActivity(context.Context, *ReportSuspiciousActivityRequest) (*ReportSuspiciousActivityResponse, error)
	ReportSuspiciousActivities(context.Context, *ReportSuspiciousActivitiesRequest) (*ReportSuspiciousActivitiesResponse, error)
	ResolveSuspiciousActivity(context.Context, *ResolveSuspiciousActivityRequest) (*ResolveSuspiciousActivityResponse, error)
	ResolveSuspiciousActivities(context.Context, *ResolveSuspiciousActivitiesRequest) (*ResolveSuspiciousActivitiesResponse, error)
	GetActiveSuspiciousActivities(context.Context, *GetActiveSuspiciousActivitiesRequest) (*GetActiveSuspiciousActivitiesResponse, error)
	GetHighRiskUsers(context.Context, *GetHighRiskUsersRequest) (*GetHighRiskUsersResponse, error)
	// Audit Queries
	GetUserAuditHistory(context.Context, *GetUserAuditHistoryRequest) (*GetUserAuditHistoryResponse, error)
	GetUsersAuditHistory(context.Context, *GetUsersAuditHistoryRequest) (*GetUsersAuditHistoryResponse, error)
	QueryAuditLogs(context.Context, *QueryAuditLogsRequest) (*QueryAuditLogsResponse, error)
	GetCriticalEvents(context.Context, *GetCriticalEventsRequest) (*GetCriticalEventsResponse, error)
	GetSecuritySummary(context.Context, *GetSecuritySummaryRequest) (*GetSecuritySummaryResponse, error)
	GetUserRiskScore(context.Context, *GetUserRiskScoreRequest) (*GetUserRiskScoreResponse, error)
	GetUsersRiskScores(context.Context, *GetUsersRiskScoresRequest) (*GetUsersRiskScoresResponse, error)
	// Rate Limiting
	CheckRateLimit(context.Context, *CheckRateLimitRequest) (*CheckRateLimitResponse, error)
	CheckRateLimits(context.Context, *CheckRateLimitsRequest) (*CheckRateLimitsResponse, error)
	mustEmbedUnimplementedSecurityAuditServiceServer()
}

// UnimplementedSecurityAuditServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecurityAuditServiceServer struct{}

func (UnimplementedSecurityAuditServiceServer) CheckAccountLockStatus(context.Context, *CheckAccountLockStatusRequest) (*CheckAccountLockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccountLockStatus not implemented")
}
func (UnimplementedSecurityAuditServiceServer) CheckAccountsLockStatus(context.Context, *CheckAccountsLockStatusRequest) (*CheckAccountsLockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccountsLockStatus not implemented")
}
func (UnimplementedSecurityAuditServiceServer) UnlockAccount(context.Context, *UnlockAccountRequest) (*UnlockAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockAccount not implemented")
}
func (UnimplementedSecurityAuditServiceServer) UnlockAccounts(context.Context, *UnlockAccountsRequest) (*UnlockAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockAccounts not implemented")
}
func (UnimplementedSecurityAuditServiceServer) DetectSuspiciousActivity(context.Context, *DetectSuspiciousActivityRequest) (*DetectSuspiciousActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectSuspiciousActivity not implemented")
}
func (UnimplementedSecurityAuditServiceServer) ReportSuspiciousActivity(context.Context, *ReportSuspiciousActivityRequest) (*ReportSuspiciousActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSuspiciousActivity not implemented")
}
func (UnimplementedSecurityAuditServiceServer) ReportSuspiciousActivities(context.Context, *ReportSuspiciousActivitiesRequest) (*ReportSuspiciousActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSuspiciousActivities not implemented")
}
func (UnimplementedSecurityAuditServiceServer) ResolveSuspiciousActivity(context.Context, *ResolveSuspiciousActivityRequest) (*ResolveSuspiciousActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveSuspiciousActivity not implemented")
}
func (UnimplementedSecurityAuditServiceServer) ResolveSuspiciousActivities(context.Context, *ResolveSuspiciousActivitiesRequest) (*ResolveSuspiciousActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveSuspiciousActivities not implemented")
}
func (UnimplementedSecurityAuditServiceServer) GetActiveSuspiciousActivities(context.Context, *GetActiveSuspiciousActivitiesRequest) (*GetActiveSuspiciousActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSuspiciousActivities not implemented")
}
func (UnimplementedSecurityAuditServiceServer) GetHighRiskUsers(context.Context, *GetHighRiskUsersRequest) (*GetHighRiskUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHighRiskUsers not implemented")
}
func (UnimplementedSecurityAuditServiceServer) GetUserAuditHistory(context.Context, *GetUserAuditHistoryRequest) (*GetUserAuditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAuditHistory not implemented")
}
func (UnimplementedSecurityAuditServiceServer) GetUsersAuditHistory(context.Context, *GetUsersAuditHistoryRequest) (*GetUsersAuditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersAuditHistory not implemented")
}
func (UnimplementedSecurityAuditServiceServer) QueryAuditLogs(context.Context, *QueryAuditLogsRequest) (*QueryAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAuditLogs not implemented")
}
func (UnimplementedSecurityAuditServiceServer) GetCriticalEvents(context.Context, *GetCriticalEventsRequest) (*GetCriticalEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCriticalEvents not implemented")
}
func (UnimplementedSecurityAuditServiceServer) GetSecuritySummary(context.Context, *GetSecuritySummaryRequest) (*GetSecuritySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecuritySummary not implemented")
}
func (UnimplementedSecurityAuditServiceServer) GetUserRiskScore(context.Context, *GetUserRiskScoreRequest) (*GetUserRiskScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRiskScore not implemented")
}
func (UnimplementedSecurityAuditServiceServer) GetUsersRiskScores(context.Context, *GetUsersRiskScoresRequest) (*GetUsersRiskScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersRiskScores not implemented")
}
func (UnimplementedSecurityAuditServiceServer) CheckRateLimit(context.Context, *CheckRateLimitRequest) (*CheckRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRateLimit not implemented")
}
func (UnimplementedSecurityAuditServiceServer) CheckRateLimits(context.Context, *CheckRateLimitsRequest) (*CheckRateLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRateLimits not implemented")
}
func (UnimplementedSecurityAuditServiceServer) mustEmbedUnimplementedSecurityAuditServiceServer() {}
func (UnimplementedSecurityAuditServiceServer) testEmbeddedByValue()                              {}

// UnsafeSecurityAuditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityAuditServiceServer will
// result in compilation errors.
type UnsafeSecurityAuditServiceServer interface {
	mustEmbedUnimplementedSecurityAuditServiceServer()
}

func RegisterSecurityAuditServiceServer(s grpc.ServiceRegistrar, srv SecurityAuditServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecurityAuditServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecurityAuditService_ServiceDesc, srv)
}

func _SecurityAuditService_CheckAccountLockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountLockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).CheckAccountLockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_CheckAccountLockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).CheckAccountLockStatus(ctx, req.(*CheckAccountLockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_CheckAccountsLockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountsLockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).CheckAccountsLockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_CheckAccountsLockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).CheckAccountsLockStatus(ctx, req.(*CheckAccountsLockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_UnlockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).UnlockAccount(ctx, req.(*UnlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_UnlockAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).UnlockAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_UnlockAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).UnlockAccounts(ctx, req.(*UnlockAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_DetectSuspiciousActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectSuspiciousActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).DetectSuspiciousActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_DetectSuspiciousActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).DetectSuspiciousActivity(ctx, req.(*DetectSuspiciousActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_ReportSuspiciousActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportSuspiciousActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).ReportSuspiciousActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_ReportSuspiciousActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).ReportSuspiciousActivity(ctx, req.(*ReportSuspiciousActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_ReportSuspiciousActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportSuspiciousActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).ReportSuspiciousActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_ReportSuspiciousActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).ReportSuspiciousActivities(ctx, req.(*ReportSuspiciousActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_ResolveSuspiciousActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveSuspiciousActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).ResolveSuspiciousActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_ResolveSuspiciousActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).ResolveSuspiciousActivity(ctx, req.(*ResolveSuspiciousActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_ResolveSuspiciousActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveSuspiciousActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).ResolveSuspiciousActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_ResolveSuspiciousActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).ResolveSuspiciousActivities(ctx, req.(*ResolveSuspiciousActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_GetActiveSuspiciousActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSuspiciousActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).GetActiveSuspiciousActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_GetActiveSuspiciousActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).GetActiveSuspiciousActivities(ctx, req.(*GetActiveSuspiciousActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_GetHighRiskUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHighRiskUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).GetHighRiskUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_GetHighRiskUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).GetHighRiskUsers(ctx, req.(*GetHighRiskUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_GetUserAuditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAuditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).GetUserAuditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_GetUserAuditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).GetUserAuditHistory(ctx, req.(*GetUserAuditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_GetUsersAuditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersAuditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).GetUsersAuditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_GetUsersAuditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).GetUsersAuditHistory(ctx, req.(*GetUsersAuditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_QueryAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).QueryAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_QueryAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).QueryAuditLogs(ctx, req.(*QueryAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_GetCriticalEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCriticalEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).GetCriticalEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_GetCriticalEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).GetCriticalEvents(ctx, req.(*GetCriticalEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_GetSecuritySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecuritySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).GetSecuritySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_GetSecuritySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).GetSecuritySummary(ctx, req.(*GetSecuritySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_GetUserRiskScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRiskScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).GetUserRiskScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_GetUserRiskScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).GetUserRiskScore(ctx, req.(*GetUserRiskScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_GetUsersRiskScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRiskScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).GetUsersRiskScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_GetUsersRiskScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).GetUsersRiskScores(ctx, req.(*GetUsersRiskScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_CheckRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).CheckRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_CheckRateLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).CheckRateLimit(ctx, req.(*CheckRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityAuditService_CheckRateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRateLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityAuditServiceServer).CheckRateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityAuditService_CheckRateLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityAuditServiceServer).CheckRateLimits(ctx, req.(*CheckRateLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityAuditService_ServiceDesc is the grpc.ServiceDesc for SecurityAuditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityAuditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.audit.security.SecurityAuditService",
	HandlerType: (*SecurityAuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAccountLockStatus",
			Handler:    _SecurityAuditService_CheckAccountLockStatus_Handler,
		},
		{
			MethodName: "CheckAccountsLockStatus",
			Handler:    _SecurityAuditService_CheckAccountsLockStatus_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _SecurityAuditService_UnlockAccount_Handler,
		},
		{
			MethodName: "UnlockAccounts",
			Handler:    _SecurityAuditService_UnlockAccounts_Handler,
		},
		{
			MethodName: "DetectSuspiciousActivity",
			Handler:    _SecurityAuditService_DetectSuspiciousActivity_Handler,
		},
		{
			MethodName: "ReportSuspiciousActivity",
			Handler:    _SecurityAuditService_ReportSuspiciousActivity_Handler,
		},
		{
			MethodName: "ReportSuspiciousActivities",
			Handler:    _SecurityAuditService_ReportSuspiciousActivities_Handler,
		},
		{
			MethodName: "ResolveSuspiciousActivity",
			Handler:    _SecurityAuditService_ResolveSuspiciousActivity_Handler,
		},
		{
			MethodName: "ResolveSuspiciousActivities",
			Handler:    _SecurityAuditService_ResolveSuspiciousActivities_Handler,
		},
		{
			MethodName: "GetActiveSuspiciousActivities",
			Handler:    _SecurityAuditService_GetActiveSuspiciousActivities_Handler,
		},
		{
			MethodName: "GetHighRiskUsers",
			Handler:    _SecurityAuditService_GetHighRiskUsers_Handler,
		},
		{
			MethodName: "GetUserAuditHistory",
			Handler:    _SecurityAuditService_GetUserAuditHistory_Handler,
		},
		{
			MethodName: "GetUsersAuditHistory",
			Handler:    _SecurityAuditService_GetUsersAuditHistory_Handler,
		},
		{
			MethodName: "QueryAuditLogs",
			Handler:    _SecurityAuditService_QueryAuditLogs_Handler,
		},
		{
			MethodName: "GetCriticalEvents",
			Handler:    _SecurityAuditService_GetCriticalEvents_Handler,
		},
		{
			MethodName: "GetSecuritySummary",
			Handler:    _SecurityAuditService_GetSecuritySummary_Handler,
		},
		{
			MethodName: "GetUserRiskScore",
			Handler:    _SecurityAuditService_GetUserRiskScore_Handler,
		},
		{
			MethodName: "GetUsersRiskScores",
			Handler:    _SecurityAuditService_GetUsersRiskScores_Handler,
		},
		{
			MethodName: "CheckRateLimit",
			Handler:    _SecurityAuditService_CheckRateLimit_Handler,
		},
		{
			MethodName: "CheckRateLimits",
			Handler:    _SecurityAuditService_CheckRateLimits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/authentication/audit-service/proto/audit.proto",
}
